defmodule Blockchain.StateTest do
  alias EthCore.Block.Header
  alias MerklePatriciaTree.Trie
  alias Blockchain.{Account, Transaction}
  alias Blockchain.Interface.AccountInterface

  use EthCommonTest.Harness
  use ExUnit.Case, async: true

  @ethereum_common_tests_path "../../ethereum_common_tests"
  @passing_tests_by_group %{
    "ArgsZeroOneBalance" => [
      # "addNonConst",
      # "addmodNonConst",
      # "andNonConst",
      # "balanceNonConst",
      # "byteNonConst",
      # "callNonConst",
      # "callcodeNonConst",
      # "calldatacopyNonConst",
      # "calldataloadNonConst",
      # "codecopyNonConst",
      # "createNonConst",
      # "delegatecallNonConst",
      # "divNonConst",
      # "eqNonConst",
      # "expNonConst",
      # "extcodecopyNonConst",
      # "extcodesizeNonConst",
      # "gtNonConst",
      # "iszeroNonConst",
      # "jumpNonConst",
      # "jumpiNonConst",
      # "log0NonConst",
      # "log1NonConst",
      # "log2NonConst",
      # "log3NonConst",
      # "ltNonConst",
      # "mloadNonConst",
      # "modNonConst",
      # "mstore8NonConst",
      # "mstoreNonConst",
      # "mulNonConst",
      # "mulmodNonConst",
      # "notNonConst",
      # "orNonConst",
      # "returnNonConst",
      # "sdivNonConst",
      # "sgtNonConst",
      # "sha3NonConst",
      # "signextNonConst",
      # "sloadNonConst",
      # "sltNonConst",
      # "smodNonConst",
      # "sstoreNonConst",
      # "subNonConst",
      # "suicideNonConst",
      # "xorNonConst",
    ],
    "AttackTest" => [
      # "ContractCreationSpam",
      # "CrashingTransaction",
    ],
    "BadOpcode" => [
      # "badOpcodes",
    ],
    "Bugs" => [
      # "evmBytecode",
      # "returndatacopyPythonBug_Tue_03_48_41-1432",
      # "staticcall_createfails",
    ],
    "CallCodes" => [
      # "call_OOG_additionalGasCosts1",
      # "call_OOG_additionalGasCosts2",
      "callcall_00",
      "callcall_00_OOGE",
      # "callcall_00_OOGE_valueTransfer",
      "callcall_00_SuicideEnd",
      "callcallcall_000",
      "callcallcall_000_OOGE",
      "callcallcall_000_OOGMAfter",
      "callcallcall_000_OOGMBefore",
      "callcallcall_000_SuicideEnd",
      "callcallcall_000_SuicideMiddle",
      "callcallcall_ABCB_RECURSIVE",
      "callcallcallcode_001",
      "callcallcallcode_001_OOGE",
      "callcallcallcode_001_OOGMAfter",
      "callcallcallcode_001_OOGMBefore",
      "callcallcallcode_001_SuicideEnd",
      "callcallcallcode_001_SuicideMiddle",
      "callcallcallcode_ABCB_RECURSIVE",
      "callcallcode_01",
      "callcallcode_01_OOGE",
      "callcallcode_01_SuicideEnd",
      "callcallcodecall_010",
      "callcallcodecall_010_OOGE",
      "callcallcodecall_010_OOGMAfter",
      "callcallcodecall_010_OOGMBefore",
      # "callcallcodecall_010_SuicideEnd",
      # "callcallcodecall_010_SuicideMiddle",
      "callcallcodecall_ABCB_RECURSIVE",
      "callcallcodecallcode_011",
      "callcallcodecallcode_011_OOGE",
      "callcallcodecallcode_011_OOGMAfter",
      "callcallcodecallcode_011_OOGMBefore",
      # "callcallcodecallcode_011_SuicideEnd",
      # "callcallcodecallcode_011_SuicideMiddle",
      "callcallcodecallcode_ABCB_RECURSIVE",
      # "callcodeDynamicCode",
      # "callcodeDynamicCode2SelfCall",
      "callcodeEmptycontract",
      # "callcodeInInitcodeToEmptyContract",
      # "callcodeInInitcodeToExisContractWithVTransferNEMoney",
      # "callcodeInInitcodeToExistingContract",
      # "callcodeInInitcodeToExistingContractWithValueTransfer",
      "callcode_checkPC",
      "callcodecall_10",
      "callcodecall_10_OOGE",
      # "callcodecall_10_SuicideEnd",
      "callcodecallcall_100",
      "callcodecallcall_100_OOGE",
      "callcodecallcall_100_OOGMAfter",
      "callcodecallcall_100_OOGMBefore",
      "callcodecallcall_100_SuicideEnd",
      "callcodecallcall_100_SuicideMiddle",
      "callcodecallcall_ABCB_RECURSIVE",
      "callcodecallcallcode_101",
      "callcodecallcallcode_101_OOGE",
      "callcodecallcallcode_101_OOGMAfter",
      "callcodecallcallcode_101_OOGMBefore",
      "callcodecallcallcode_101_SuicideEnd",
      "callcodecallcallcode_101_SuicideMiddle",
      "callcodecallcallcode_ABCB_RECURSIVE",
      "callcodecallcode_11",
      "callcodecallcode_11_OOGE",
      # "callcodecallcode_11_SuicideEnd",
      "callcodecallcodecall_110",
      "callcodecallcodecall_110_OOGE",
      "callcodecallcodecall_110_OOGMAfter",
      "callcodecallcodecall_110_OOGMBefore",
      # "callcodecallcodecall_110_SuicideEnd",
      # "callcodecallcodecall_110_SuicideMiddle",
      "callcodecallcodecall_ABCB_RECURSIVE",
      "callcodecallcodecallcode_111",
      "callcodecallcodecallcode_111_OOGE",
      "callcodecallcodecallcode_111_OOGMAfter",
      "callcodecallcodecallcode_111_OOGMBefore",
      # "callcodecallcodecallcode_111_SuicideEnd",
      # "callcodecallcodecallcode_111_SuicideMiddle",
      "callcodecallcodecallcode_ABCB_RECURSIVE"
    ],
    "CallCreateCallCodeTest" => [
      "Call1024BalanceTooLow",
      "Call1024OOG",
      "Call1024PreCalls",
      "CallLoseGasOOG",
      "CallRecursiveBombPreCall",
      "Callcode1024BalanceTooLow",
      # "Callcode1024OOG",
      "CallcodeLoseGasOOG",
      "callOutput1",
      "callOutput2",
      "callOutput3",
      "callOutput3Fail",
      "callOutput3partial",
      "callOutput3partialFail",
      # "callWithHighValue",
      # "callWithHighValueAndGasOOG",
      # "callWithHighValueAndOOGatTxLevel",
      "callWithHighValueOOGinCall",
      "callcodeOutput1",
      "callcodeOutput2",
      "callcodeOutput3",
      "callcodeOutput3Fail",
      "callcodeOutput3partial",
      "callcodeOutput3partialFail",
      # "callcodeWithHighValue",
      # "callcodeWithHighValueAndGasOOG",
      "createFailBalanceTooLow",
      # "createInitFailBadJumpDestination",
      # "createInitFailStackSizeLargerThan1024",
      # "createInitFailStackUnderflow",
      # "createInitFailUndefinedInstruction",
      # "createInitFail_OOGduringInit",
      # "createInitOOGforCREATE",
      # "createJS_ExampleContract",
      # "createJS_NoCollision",
      # "createNameRegistratorPerTxs",
      # "createNameRegistratorPerTxsNotEnoughGas",
      # "createNameRegistratorPreStore1NotEnoughGas",
      "createNameRegistratorendowmentTooHigh"
    ],
    "CallDelegateCodesCallCodeHomestead" => [
      # "callcallcallcode_001",
      # "callcallcallcode_001_OOGE",
      # "callcallcallcode_001_OOGMAfter",
      # "callcallcallcode_001_OOGMBefore",
      # "callcallcallcode_001_SuicideEnd",
      # "callcallcallcode_001_SuicideMiddle",
      # "callcallcallcode_ABCB_RECURSIVE",
      # "callcallcode_01",
      # "callcallcode_01_OOGE",
      # "callcallcode_01_SuicideEnd",
      # "callcallcodecall_010",
      # "callcallcodecall_010_OOGE",
      # "callcallcodecall_010_OOGMAfter",
      # "callcallcodecall_010_OOGMBefore",
      # "callcallcodecall_010_SuicideEnd",
      # "callcallcodecall_010_SuicideMiddle",
      # "callcallcodecall_ABCB_RECURSIVE",
      # "callcallcodecallcode_011",
      # "callcallcodecallcode_011_OOGE",
      # "callcallcodecallcode_011_OOGMAfter",
      # "callcallcodecallcode_011_OOGMBefore",
      # "callcallcodecallcode_011_SuicideEnd",
      # "callcallcodecallcode_011_SuicideMiddle",
      # "callcallcodecallcode_ABCB_RECURSIVE",
      # "callcodecall_10",
      # "callcodecall_10_OOGE",
      # "callcodecall_10_SuicideEnd",
      # "callcodecallcall_100",
      # "callcodecallcall_100_OOGE",
      # "callcodecallcall_100_OOGMAfter",
      # "callcodecallcall_100_OOGMBefore",
      # "callcodecallcall_100_SuicideEnd",
      # "callcodecallcall_100_SuicideMiddle",
      # "callcodecallcall_ABCB_RECURSIVE",
      # "callcodecallcallcode_101",
      # "callcodecallcallcode_101_OOGE",
      # "callcodecallcallcode_101_OOGMAfter",
      # "callcodecallcallcode_101_OOGMBefore",
      # "callcodecallcallcode_101_SuicideEnd",
      # "callcodecallcallcode_101_SuicideMiddle",
      # "callcodecallcallcode_ABCB_RECURSIVE",
      # "callcodecallcode_11",
      # "callcodecallcode_11_OOGE",
      # "callcodecallcode_11_SuicideEnd",
      # "callcodecallcodecall_110",
      # "callcodecallcodecall_110_OOGE",
      # "callcodecallcodecall_110_OOGMAfter",
      # "callcodecallcodecall_110_OOGMBefore",
      # "callcodecallcodecall_110_SuicideEnd",
      # "callcodecallcodecall_110_SuicideMiddle",
      # "callcodecallcodecall_ABCB_RECURSIVE",
      # "callcodecallcodecallcode_111",
      # "callcodecallcodecallcode_111_OOGE",
      # "callcodecallcodecallcode_111_OOGMAfter",
      # "callcodecallcodecallcode_111_OOGMBefore",
      # "callcodecallcodecallcode_111_SuicideEnd",
      # "callcodecallcodecallcode_111_SuicideMiddle",
      # "callcodecallcodecallcode_ABCB_RECURSIVE",
    ],
    "CallDelegateCodesHomestead" => [
      # "callcallcallcode_001",
      # "callcallcallcode_001_OOGE",
      # "callcallcallcode_001_OOGMAfter",
      # "callcallcallcode_001_OOGMBefore",
      # "callcallcallcode_001_SuicideEnd",
      # "callcallcallcode_001_SuicideMiddle",
      # "callcallcallcode_ABCB_RECURSIVE",
      # "callcallcode_01",
      # "callcallcode_01_OOGE",
      # "callcallcode_01_SuicideEnd",
      # "callcallcodecall_010",
      # "callcallcodecall_010_OOGE",
      # "callcallcodecall_010_OOGMAfter",
      # "callcallcodecall_010_OOGMBefore",
      # "callcallcodecall_010_SuicideEnd",
      # "callcallcodecall_010_SuicideMiddle",
      # "callcallcodecall_ABCB_RECURSIVE",
      # "callcallcodecallcode_011",
      # "callcallcodecallcode_011_OOGE",
      # "callcallcodecallcode_011_OOGMAfter",
      # "callcallcodecallcode_011_OOGMBefore",
      # "callcallcodecallcode_011_SuicideEnd",
      # "callcallcodecallcode_011_SuicideMiddle",
      # "callcallcodecallcode_ABCB_RECURSIVE",
      # "callcodecall_10",
      # "callcodecall_10_OOGE",
      # "callcodecall_10_SuicideEnd",
      # "callcodecallcall_100",
      # "callcodecallcall_100_OOGE",
      # "callcodecallcall_100_OOGMAfter",
      # "callcodecallcall_100_OOGMBefore",
      # "callcodecallcall_100_SuicideEnd",
      # "callcodecallcall_100_SuicideMiddle",
      # "callcodecallcall_ABCB_RECURSIVE",
      # "callcodecallcallcode_101",
      # "callcodecallcallcode_101_OOGE",
      # "callcodecallcallcode_101_OOGMAfter",
      # "callcodecallcallcode_101_OOGMBefore",
      # "callcodecallcallcode_101_SuicideEnd",
      # "callcodecallcallcode_101_SuicideMiddle",
      # "callcodecallcallcode_ABCB_RECURSIVE",
      # "callcodecallcode_11",
      # "callcodecallcode_11_OOGE",
      # "callcodecallcode_11_SuicideEnd",
      # "callcodecallcodecall_110",
      # "callcodecallcodecall_110_OOGE",
      # "callcodecallcodecall_110_OOGMAfter",
      # "callcodecallcodecall_110_OOGMBefore",
      # "callcodecallcodecall_110_SuicideEnd",
      # "callcodecallcodecall_110_SuicideMiddle",
      # "callcodecallcodecall_ABCB_RECURSIVE",
      # "callcodecallcodecallcode_111",
      # "callcodecallcodecallcode_111_OOGE",
      # "callcodecallcodecallcode_111_OOGMAfter",
      # "callcodecallcodecallcode_111_OOGMBefore",
      # "callcodecallcodecallcode_111_SuicideEnd",
      # "callcodecallcodecallcode_111_SuicideMiddle",
      # "callcodecallcodecallcode_ABCB_RECURSIVE",
    ],
    "ChangedEIP150" => [
      # "Call1024BalanceTooLow",
      # "Call1024PreCalls",
      # "Callcode1024BalanceTooLow",
      # "callcall_00_OOGE_1",
      # "callcall_00_OOGE_2",
      # "callcall_00_OOGE_valueTransfer",
      # "callcallcall_000_OOGMAfter",
      # "callcallcallcode_001_OOGMAfter_1",
      # "callcallcallcode_001_OOGMAfter_2",
      # "callcallcallcode_001_OOGMAfter_3",
      # "callcallcodecall_010_OOGMAfter_1",
      # "callcallcodecall_010_OOGMAfter_2",
      # "callcallcodecall_010_OOGMAfter_3",
      # "callcallcodecallcode_011_OOGMAfter_1",
      # "callcallcodecallcode_011_OOGMAfter_2",
      # "callcodecallcall_100_OOGMAfter_1",
      # "callcodecallcall_100_OOGMAfter_2",
      # "callcodecallcall_100_OOGMAfter_3",
      # "callcodecallcallcode_101_OOGMAfter_1",
      # "callcodecallcallcode_101_OOGMAfter_2",
      # "callcodecallcallcode_101_OOGMAfter_3",
      # "callcodecallcodecall_110_OOGMAfter_1",
      # "callcodecallcodecall_110_OOGMAfter_2",
      # "callcodecallcodecall_110_OOGMAfter_3",
      # "callcodecallcodecallcode_111_OOGMAfter",
      # "callcodecallcodecallcode_111_OOGMAfter_1",
      # "callcodecallcodecallcode_111_OOGMAfter_2",
      # "callcodecallcodecallcode_111_OOGMAfter_3",
      # "contractCreationMakeCallThatAskMoreGasThenTransactionProvided",
      # "createInitFail_OOGduringInit",
    ],
    "CodeCopyTest" => [
      # "ExtCodeCopyTests",
    ],
    "CodeSizeLimit" => [
      # "codesizeInit",
      # "codesizeOOGInvalidSize",
      # "codesizeValid",
    ],
    "CreateTest" => [
      # "CREATE_AcreateB_BSuicide_BStore",
      # "CREATE_ContractRETURNBigOffset",
      # "CREATE_ContractSSTOREDuringInit",
      # "CREATE_ContractSuicideDuringInit",
      # "CREATE_ContractSuicideDuringInit_ThenStoreThenReturn",
      # "CREATE_ContractSuicideDuringInit_WithValue",
      # "CREATE_ContractSuicideDuringInit_WithValueToItself",
      # "CREATE_EContractCreateEContractInInit_Tr",
      # "CREATE_EContractCreateNEContractInInitOOG_Tr",
      # "CREATE_EContractCreateNEContractInInit_Tr",
      # "CREATE_EContract_ThenCALLToNonExistentAcc",
      # "CREATE_EmptyContract",
      # "CREATE_EmptyContractAndCallIt_0wei",
      # "CREATE_EmptyContractAndCallIt_1wei",
      # "CREATE_EmptyContractWithBalance",
      # "CREATE_EmptyContractWithStorage",
      # "CREATE_EmptyContractWithStorageAndCallIt_0wei",
      # "CREATE_EmptyContractWithStorageAndCallIt_1wei",
      # "CREATE_empty000CreateinInitCode_Transaction",
      # "CreateCollisionToEmpty",
      # "TransactionCollisionToEmpty",
      # "TransactionCollisionToEmptyButCode",
      # "TransactionCollisionToEmptyButNonce",
    ],
    "DelegatecallTestHomestead" => [
      # "Call1024BalanceTooLow",
      # "Call1024OOG",
      # "Call1024PreCalls",
      # "CallLoseGasOOG",
      # "CallRecursiveBombPreCall",
      # "CallcodeLoseGasOOG",
      # "Delegatecall1024",
      # "Delegatecall1024OOG",
      # "callOutput1",
      # "callOutput2",
      # "callOutput3",
      # "callOutput3Fail",
      # "callOutput3partial",
      # "callOutput3partialFail",
      # "callWithHighValueAndGasOOG",
      # "callcodeOutput1",
      # "callcodeOutput2",
      # "callcodeOutput3",
      # "callcodeOutput3Fail",
      # "callcodeOutput3partial",
      # "callcodeOutput3partialFail",
      # "callcodeWithHighValueAndGasOOG",
      # "deleagateCallAfterValueTransfer",
      # "delegatecallAndOOGatTxLevel",
      # "delegatecallBasic",
      # "delegatecallEmptycontract",
      # "delegatecallInInitcodeToEmptyContract",
      # "delegatecallInInitcodeToExistingContract",
      # "delegatecallInInitcodeToExistingContractOOG",
      # "delegatecallOOGinCall",
      # "delegatecallSenderCheck",
      # "delegatecallValueCheck",
      # "delegatecodeDynamicCode",
      # "delegatecodeDynamicCode2SelfCall",
    ],
    "EIP150Specific" => [
      # "CallAndCallcodeConsumeMoreGasThenTransactionHas",
      # "CallAskMoreGasOnDepth2ThenTransactionHas",
      # "CallGoesOOGOnSecondLevel",
      # "CallGoesOOGOnSecondLevel2",
      # "CreateAndGasInsideCreate",
      # "DelegateCallOnEIP",
      # "ExecuteCallThatAskForeGasThenTrabsactionHas",
      # "NewGasPriceForCodes",
      # "SuicideToExistingContract",
      # "SuicideToNotExistingContract",
      # "Transaction64Rule_d64e0",
      # "Transaction64Rule_d64m1",
      # "Transaction64Rule_d64p1",
    ],
    "EIP150singleCodeGasPrices" => [
      # "RawBalanceGas",
      "RawCallCodeGas"
      # "RawCallCodeGasAsk",
      # "RawCallCodeGasMemory",
      # "RawCallCodeGasMemoryAsk",
      # "RawCallCodeGasValueTransfer",
      # "RawCallCodeGasValueTransferAsk",
      # "RawCallCodeGasValueTransferMemory",
      # "RawCallCodeGasValueTransferMemoryAsk",
      # "RawCallGas",
      # "RawCallGasAsk",
      # "RawCallGasValueTransfer",
      # "RawCallGasValueTransferAsk",
      # "RawCallGasValueTransferMemory",
      # "RawCallGasValueTransferMemoryAsk",
      # "RawCallMemoryGas",
      # "RawCallMemoryGasAsk",
      # "RawCreateFailGasValueTransfer",
      # "RawCreateFailGasValueTransfer2",
      # "RawCreateGas",
      # "RawCreateGasMemory",
      # "RawCreateGasValueTransfer",
      # "RawCreateGasValueTransferMemory",
      # "RawDelegateCallGas",
      # "RawDelegateCallGasAsk",
      # "RawDelegateCallGasMemory",
      # "RawDelegateCallGasMemoryAsk",
      # "RawExtCodeCopyGas",
      # "RawExtCodeCopyMemoryGas",
      # "RawExtCodeSizeGas",
    ],
    "EIP158Specific" => [
      # "CALL_OneVCallSuicide",
      # "CALL_ZeroVCallSuicide",
      # "EXP_Empty",
      # "EXTCODESIZE_toEpmty",
      # "EXTCODESIZE_toNonExistent",
      # "vitalikTransactionTest",
    ],
    "EWASMTests" => [],
    "Example" => [
      "add11"
    ],
    "HomesteadSpecific" => [
      # "contractCreationOOGdontLeaveEmptyContract",
      # "contractCreationOOGdontLeaveEmptyContractViaTransaction",
      # "createContractViaContract",
      # "createContractViaContractOOGInitCode",
      # "createContractViaTransactionCost53000",
    ],
    "InitCodeTest" => [
      # "CallContractToCreateContractAndCallItOOG",
      "CallContractToCreateContractNoCash",
      "CallContractToCreateContractOOG",
      # "CallContractToCreateContractOOGBonusGas",
      # "CallContractToCreateContractWhichWouldCreateContractIfCalled",
      # "CallContractToCreateContractWhichWouldCreateContractInInitCode",
      # "CallRecursiveContract",
      # "CallTheContractToCreateEmptyContract",
      # "NotEnoughCashContractCreation",
      # "OutOfGasContractCreation",
      # "OutOfGasPrefundedContractCreation",
      "ReturnTest",
      "ReturnTest2"
      # "StackUnderFlowContractCreation",
      # "TransactionCreateAutoSuicideContract",
      # "TransactionCreateRandomInitCode",
      # "TransactionCreateStopInInitcode",
      # "TransactionCreateSuicideInInitcode",
    ],
    "LogTests" => [
      "log0_emptyMem",
      # "log0_logMemStartTooHigh",
      "log0_logMemsizeTooHigh",
      "log0_logMemsizeZero",
      "log0_nonEmptyMem",
      "log0_nonEmptyMem_logMemSize1",
      "log0_nonEmptyMem_logMemSize1_logMemStart31",
      "log1_Caller",
      "log1_MaxTopic",
      "log1_emptyMem",
      # "log1_logMemStartTooHigh",
      "log1_logMemsizeTooHigh",
      "log1_logMemsizeZero",
      "log1_nonEmptyMem",
      "log1_nonEmptyMem_logMemSize1",
      "log1_nonEmptyMem_logMemSize1_logMemStart31",
      "log2_Caller",
      "log2_MaxTopic",
      "log2_emptyMem",
      # "log2_logMemStartTooHigh",
      "log2_logMemsizeTooHigh",
      "log2_logMemsizeZero",
      "log2_nonEmptyMem",
      "log2_nonEmptyMem_logMemSize1",
      "log2_nonEmptyMem_logMemSize1_logMemStart31",
      "log3_Caller",
      "log3_MaxTopic",
      "log3_PC",
      "log3_emptyMem",
      # "log3_logMemStartTooHigh",
      "log3_logMemsizeTooHigh",
      "log3_logMemsizeZero",
      "log3_nonEmptyMem",
      "log3_nonEmptyMem_logMemSize1",
      "log3_nonEmptyMem_logMemSize1_logMemStart31",
      "log4_Caller",
      "log4_MaxTopic",
      "log4_PC",
      "log4_emptyMem",
      # "log4_logMemStartTooHigh",
      "log4_logMemsizeTooHigh",
      "log4_logMemsizeZero",
      "log4_nonEmptyMem",
      "log4_nonEmptyMem_logMemSize1",
      "log4_nonEmptyMem_logMemSize1_logMemStart31",
      "logInOOG_Call"
    ],
    "MemExpandingEIP150Calls" => [
      # "CallAndCallcodeConsumeMoreGasThenTransactionHasWithMemExpandingCalls",
      "CallAskMoreGasOnDepth2ThenTransactionHasWithMemExpandingCalls"
      # "CallGoesOOGOnSecondLevel2WithMemExpandingCalls",
      # "CallGoesOOGOnSecondLevelWithMemExpandingCalls",
      # "CreateAndGasInsideCreateWithMemExpandingCalls",
      # "DelegateCallOnEIPWithMemExpandingCalls",
      # "ExecuteCallThatAskMoreGasThenTransactionHasWithMemExpandingCalls",
      # "NewGasPriceForCodesWithMemExpandingCalls",
    ],
    "MemoryStressTest" => [
      # "CALLCODE_Bounds",
      # "CALLCODE_Bounds2",
      # "CALLCODE_Bounds3",
      # "CALLCODE_Bounds4",
      # "CALL_Bounds",
      # "CALL_Bounds2",
      # "CALL_Bounds2a",
      # "CALL_Bounds3",
      # "CREATE_Bounds",
      # "CREATE_Bounds2",
      # "CREATE_Bounds3",
      # "DELEGATECALL_Bounds",
      # "DELEGATECALL_Bounds2",
      # "DELEGATECALL_Bounds3",
      # "DUP_Bounds",
      # "FillStack",
      # "JUMPI_Bounds",
      # "JUMP_Bounds",
      # "JUMP_Bounds2",
      # "MLOAD_Bounds",
      # "MLOAD_Bounds2",
      # "MLOAD_Bounds3",
      # "MSTORE_Bounds",
      # "MSTORE_Bounds2",
      # "MSTORE_Bounds2a",
      # "POP_Bounds",
      # "RETURN_Bounds",
      # "SLOAD_Bounds",
      # "SSTORE_Bounds",
      # "mload32bitBound",
      # "mload32bitBound2",
      # "mload32bitBound_Msize",
      # "mload32bitBound_return",
      # "mload32bitBound_return2",
      # "static_CALL_Bounds",
      # "static_CALL_Bounds2",
      # "static_CALL_Bounds2a",
      # "static_CALL_Bounds3",
    ],
    "MemoryTest" => [
      # "callDataCopyOffset",
      # "calldatacopy_dejavu",
      "calldatacopy_dejavu2",
      # "codeCopyOffset",
      # "codecopy_dejavu",
      "codecopy_dejavu2",
      # "extcodecopy_dejavu",
      # "log1_dejavu",
      # "log2_dejavu",
      # "log3_dejavu",
      # "log4_dejavu",
      "mem0b_singleByte",
      "mem31b_singleByte",
      "mem32b_singleByte",
      "mem32kb",
      "mem32kb+1",
      "mem32kb+31",
      "mem32kb+32",
      "mem32kb+33",
      "mem32kb-1",
      "mem32kb-31",
      "mem32kb-32",
      "mem32kb-33",
      "mem32kb_singleByte",
      "mem32kb_singleByte+1",
      "mem32kb_singleByte+31",
      "mem32kb_singleByte+32",
      "mem32kb_singleByte+33",
      "mem32kb_singleByte-1",
      "mem32kb_singleByte-31",
      "mem32kb_singleByte-32",
      "mem32kb_singleByte-33",
      "mem33b_singleByte",
      "mem64kb",
      "mem64kb+1",
      "mem64kb+31",
      "mem64kb+32",
      "mem64kb+33",
      "mem64kb-1",
      "mem64kb-31",
      "mem64kb-32",
      "mem64kb-33",
      "mem64kb_singleByte",
      "mem64kb_singleByte+1",
      "mem64kb_singleByte+31",
      "mem64kb_singleByte+32",
      "mem64kb_singleByte+33",
      "mem64kb_singleByte-1",
      "mem64kb_singleByte-31",
      "mem64kb_singleByte-32",
      "mem64kb_singleByte-33",
      "memReturn",
      "mload16bitBound",
      "mload8bitBound",
      # "mload_dejavu",
      # "mstore_dejavu",
      # "mstroe8_dejavu",
      # "sha3_dejavu",
      "stackLimitGas_1023",
      "stackLimitGas_1024"
      # "stackLimitGas_1025",
      # "stackLimitPush31_1023",
      # "stackLimitPush31_1024",
      # "stackLimitPush31_1025",
      # "stackLimitPush32_1023",
      # "stackLimitPush32_1024",
      # "stackLimitPush32_1025",
    ],
    "NonZeroCallsTest" => [
      "NonZeroValue_CALL",
      "NonZeroValue_CALLCODE",
      "NonZeroValue_CALLCODE_ToEmpty",
      # "NonZeroValue_CALLCODE_ToNonNonZeroBalance",
      # "NonZeroValue_CALLCODE_ToOneStorageKey",
      "NonZeroValue_CALL_ToEmpty",
      # "NonZeroValue_CALL_ToNonNonZeroBalance",
      # "NonZeroValue_CALL_ToOneStorageKey",
      # "NonZeroValue_DELEGATECALL",
      # "NonZeroValue_DELEGATECALL_ToEmpty",
      # "NonZeroValue_DELEGATECALL_ToNonNonZeroBalance",
      # "NonZeroValue_DELEGATECALL_ToOneStorageKey",
      "NonZeroValue_SUICIDE",
      "NonZeroValue_SUICIDE_ToEmpty",
      "NonZeroValue_SUICIDE_ToNonNonZeroBalance",
      # "NonZeroValue_SUICIDE_ToOneStorageKey",
      "NonZeroValue_TransactionCALL",
      "NonZeroValue_TransactionCALL_ToEmpty",
      "NonZeroValue_TransactionCALL_ToNonNonZeroBalance",
      # "NonZeroValue_TransactionCALL_ToOneStorageKey",
      "NonZeroValue_TransactionCALLwithData",
      "NonZeroValue_TransactionCALLwithData_ToEmpty",
      "NonZeroValue_TransactionCALLwithData_ToNonNonZeroBalance"
      # "NonZeroValue_TransactionCALLwithData_ToOneStorageKey",
    ],
    "PreCompiledContracts" => [
      # "identity_to_bigger",
      # "identity_to_smaller",
      # "modexp",
      # "modexp_0_0_0_1000000",
      # "modexp_0_0_0_155000",
      # "modexp_0_1_0_1000000",
      # "modexp_0_1_0_155000",
      # "modexp_0_1_0_20500",
      # "modexp_0_1_0_22000",
      # "modexp_0_1_0_25000",
      # "modexp_0_1_0_35000",
      # "modexp_0_3_100_1000000",
      # "modexp_0_3_100_155000",
      # "modexp_0_3_100_20500",
      # "modexp_0_3_100_22000",
      # "modexp_0_3_100_25000",
      # "modexp_0_3_100_35000",
      # "modexp_1_0_0_1000000",
      # "modexp_1_0_0_155000",
      # "modexp_1_0_0_20500",
      # "modexp_1_0_0_22000",
      # "modexp_1_0_0_25000",
      # "modexp_1_0_0_35000",
      # "modexp_1_0_1_1000000",
      # "modexp_1_0_1_155000",
      # "modexp_1_0_1_20500",
      # "modexp_1_0_1_22000",
      # "modexp_1_0_1_25000",
      # "modexp_1_0_1_35000",
      # "modexp_1_1_1_1000000",
      # "modexp_1_1_1_155000",
      # "modexp_1_1_1_20500",
      # "modexp_1_1_1_22000",
      # "modexp_1_1_1_25000",
      # "modexp_1_1_1_35000",
      # "modexp_37120_22411_22000",
      # "modexp_37120_37111_0_1000000",
      # "modexp_37120_37111_0_155000",
      # "modexp_37120_37111_0_20500",
      # "modexp_37120_37111_0_22000",
      # "modexp_37120_37111_0_25000",
      # "modexp_37120_37111_0_35000",
      # "modexp_37120_37111_1_1000000",
      # "modexp_37120_37111_1_155000",
      # "modexp_37120_37111_1_20500",
      # "modexp_37120_37111_1_25000",
      # "modexp_37120_37111_1_35000",
      # "modexp_37120_37111_37111_1000000",
      # "modexp_37120_37111_37111_155000",
      # "modexp_37120_37111_37111_20500",
      # "modexp_37120_37111_37111_22000",
      # "modexp_37120_37111_37111_25000",
      # "modexp_37120_37111_37111_35000",
      # "modexp_37120_37111_97_1000000",
      # "modexp_37120_37111_97_155000",
      # "modexp_37120_37111_97_20500",
      # "modexp_37120_37111_97_22000",
      # "modexp_37120_37111_97_25000",
      # "modexp_37120_37111_97_35000",
      # "modexp_39936_1_55201_1000000",
      # "modexp_39936_1_55201_155000",
      # "modexp_39936_1_55201_20500",
      # "modexp_39936_1_55201_22000",
      # "modexp_39936_1_55201_25000",
      # "modexp_39936_1_55201_35000",
      # "modexp_3_09984_39936_1000000",
      # "modexp_3_09984_39936_155000",
      # "modexp_3_09984_39936_22000",
      # "modexp_3_09984_39936_25000",
      # "modexp_3_09984_39936_35000",
      # "modexp_3_28948_11579_20500",
      # "modexp_3_5_100_1000000",
      # "modexp_3_5_100_155000",
      # "modexp_3_5_100_20500",
      # "modexp_3_5_100_22000",
      # "modexp_3_5_100_25000",
      # "modexp_3_5_100_35000",
      # "modexp_49_2401_2401_1000000",
      # "modexp_49_2401_2401_155000",
      # "modexp_49_2401_2401_20500",
      # "modexp_49_2401_2401_22000",
      # "modexp_49_2401_2401_25000",
      # "modexp_49_2401_2401_35000",
      # "modexp_55190_55190_42965_1000000",
      # "modexp_55190_55190_42965_155000",
      # "modexp_55190_55190_42965_20500",
      # "modexp_55190_55190_42965_22000",
      # "modexp_55190_55190_42965_25000",
      # "modexp_55190_55190_42965_35000",
      # "modexp_9_37111_37111_1000000",
      # "modexp_9_37111_37111_155000",
      # "modexp_9_37111_37111_20500",
      # "modexp_9_37111_37111_22000",
      # "modexp_9_37111_37111_35000",
      # "modexp_9_3711_37111_25000",
      # "sec80",
    ],
    "PreCompiledContracts2" => [
      # "CALLCODEEcrecover0",
      # "CALLCODEEcrecover0_0input",
      # "CALLCODEEcrecover0_Gas2999",
      # "CALLCODEEcrecover0_NoGas",
      # "CALLCODEEcrecover0_completeReturnValue",
      # "CALLCODEEcrecover0_gas3000",
      # "CALLCODEEcrecover0_overlappingInputOutput",
      # "CALLCODEEcrecover1",
      # "CALLCODEEcrecover2",
      # "CALLCODEEcrecover3",
      # "CALLCODEEcrecover80",
      # "CALLCODEEcrecoverH_prefixed0",
      # "CALLCODEEcrecoverR_prefixed0",
      # "CALLCODEEcrecoverS_prefixed0",
      # "CALLCODEEcrecoverV_prefixed0",
      # "CALLCODEEcrecoverV_prefixedf0",
      # "CALLCODEIdentitiy_0",
      # "CALLCODEIdentitiy_1",
      # "CALLCODEIdentity_1_nonzeroValue",
      # "CALLCODEIdentity_2",
      # "CALLCODEIdentity_3",
      # "CALLCODEIdentity_4",
      # "CALLCODEIdentity_4_gas17",
      # "CALLCODEIdentity_4_gas18",
      # "CALLCODEIdentity_5",
      # "CALLCODERipemd160_0",
      # "CALLCODERipemd160_1",
      # "CALLCODERipemd160_2",
      # "CALLCODERipemd160_3",
      # "CALLCODERipemd160_3_postfixed0",
      # "CALLCODERipemd160_3_prefixed0",
      # "CALLCODERipemd160_4",
      # "CALLCODERipemd160_4_gas719",
      # "CALLCODERipemd160_5",
      # "CALLCODESha256_0",
      # "CALLCODESha256_1",
      # "CALLCODESha256_1_nonzeroValue",
      # "CALLCODESha256_2",
      # "CALLCODESha256_3",
      # "CALLCODESha256_3_postfix0",
      # "CALLCODESha256_3_prefix0",
      # "CALLCODESha256_4",
      # "CALLCODESha256_4_gas99",
      # "CALLCODESha256_5",
      # "CallEcrecover0",
      # "CallEcrecover0_0input",
      # "CallEcrecover0_Gas2999",
      # "CallEcrecover0_NoGas",
      # "CallEcrecover0_completeReturnValue",
      # "CallEcrecover0_gas3000",
      # "CallEcrecover0_overlappingInputOutput",
      # "CallEcrecover1",
      # "CallEcrecover2",
      # "CallEcrecover3",
      # "CallEcrecover80",
      # "CallEcrecoverCheckLength",
      # "CallEcrecoverCheckLengthWrongV",
      # "CallEcrecoverH_prefixed0",
      # "CallEcrecoverR_prefixed0",
      # "CallEcrecoverS_prefixed0",
      # "CallEcrecoverV_prefixed0",
      # "CallIdentitiy_0",
      # "CallIdentitiy_1",
      # "CallIdentity_1_nonzeroValue",
      # "CallIdentity_2",
      # "CallIdentity_3",
      # "CallIdentity_4",
      # "CallIdentity_4_gas17",
      # "CallIdentity_4_gas18",
      # "CallIdentity_5",
      # "CallRipemd160_0",
      # "CallRipemd160_1",
      # "CallRipemd160_2",
      # "CallRipemd160_3",
      # "CallRipemd160_3_postfixed0",
      # "CallRipemd160_3_prefixed0",
      # "CallRipemd160_4",
      # "CallRipemd160_4_gas719",
      # "CallRipemd160_5",
      # "CallSha256_0",
      # "CallSha256_1",
      # "CallSha256_1_nonzeroValue",
      # "CallSha256_2",
      # "CallSha256_3",
      # "CallSha256_3_postfix0",
      # "CallSha256_3_prefix0",
      # "CallSha256_4",
      # "CallSha256_4_gas99",
      # "CallSha256_5",
      # "modexpRandomInput",
      # "modexp_0_0_0_20500",
      # "modexp_0_0_0_22000",
      # "modexp_0_0_0_25000",
      # "modexp_0_0_0_35000",
    ],
    "QuadraticComplexityTest" => [
      # "Call1MB1024Calldepth",
      # "Call50000",
      # "Call50000_ecrec",
      # "Call50000_identity",
      # "Call50000_identity2",
      # "Call50000_rip160",
      # "Call50000_sha256",
      # "Call50000bytesContract50_1",
      # "Call50000bytesContract50_2",
      # "Call50000bytesContract50_3",
      # "Callcode50000",
      # "Create1000",
      # "Create1000Byzantium",
      # "QuadraticComplexitySolidity_CallDataCopy",
      # "Return50000",
      # "Return50000_2",
    ],
    "Random" => [
      # "randomStatetest0",
      # "randomStatetest1",
      # "randomStatetest10",
      # "randomStatetest100",
      # "randomStatetest101",
      # "randomStatetest102",
      # "randomStatetest103",
      # "randomStatetest104",
      # "randomStatetest105",
      # "randomStatetest106",
      # "randomStatetest107",
      # "randomStatetest108",
      # "randomStatetest11",
      # "randomStatetest110",
      # "randomStatetest111",
      # "randomStatetest112",
      # "randomStatetest114",
      # "randomStatetest115",
      # "randomStatetest116",
      # "randomStatetest117",
      # "randomStatetest118",
      # "randomStatetest119",
      # "randomStatetest12",
      # "randomStatetest120",
      # "randomStatetest121",
      # "randomStatetest122",
      # "randomStatetest123",
      # "randomStatetest124",
      # "randomStatetest125",
      # "randomStatetest126",
      # "randomStatetest129",
      # "randomStatetest13",
      # "randomStatetest130",
      # "randomStatetest131",
      # "randomStatetest133",
      # "randomStatetest134",
      # "randomStatetest135",
      # "randomStatetest136",
      # "randomStatetest137",
      # "randomStatetest138",
      # "randomStatetest139",
      # "randomStatetest14",
      # "randomStatetest142",
      # "randomStatetest143",
      # "randomStatetest144",
      # "randomStatetest145",
      # "randomStatetest146",
      # "randomStatetest147",
      # "randomStatetest148",
      # "randomStatetest149",
      # "randomStatetest15",
      # "randomStatetest150",
      # "randomStatetest151",
      # "randomStatetest153",
      # "randomStatetest154",
      # "randomStatetest155",
      # "randomStatetest156",
      # "randomStatetest157",
      # "randomStatetest158",
      # "randomStatetest159",
      # "randomStatetest16",
      # "randomStatetest160",
      # "randomStatetest161",
      # "randomStatetest162",
      # "randomStatetest163",
      # "randomStatetest164",
      # "randomStatetest166",
      # "randomStatetest167",
      # "randomStatetest169",
      # "randomStatetest17",
      # "randomStatetest170",
      # "randomStatetest171",
      # "randomStatetest172",
      # "randomStatetest173",
      # "randomStatetest174",
      # "randomStatetest175",
      # "randomStatetest176",
      # "randomStatetest177",
      # "randomStatetest178",
      # "randomStatetest179",
      # "randomStatetest18",
      # "randomStatetest180",
      # "randomStatetest183",
      # "randomStatetest184",
      # "randomStatetest185",
      # "randomStatetest187",
      # "randomStatetest188",
      # "randomStatetest189",
      # "randomStatetest19",
      # "randomStatetest190",
      # "randomStatetest191",
      # "randomStatetest192",
      # "randomStatetest194",
      # "randomStatetest195",
      # "randomStatetest196",
      # "randomStatetest197",
      # "randomStatetest198",
      # "randomStatetest199",
      # "randomStatetest2",
      # "randomStatetest20",
      # "randomStatetest200",
      # "randomStatetest201",
      # "randomStatetest202",
      # "randomStatetest204",
      # "randomStatetest205",
      # "randomStatetest206",
      # "randomStatetest207",
      # "randomStatetest208",
      # "randomStatetest209",
      # "randomStatetest210",
      # "randomStatetest211",
      # "randomStatetest212",
      # "randomStatetest214",
      # "randomStatetest215",
      # "randomStatetest216",
      # "randomStatetest217",
      # "randomStatetest219",
      # "randomStatetest22",
      # "randomStatetest220",
      # "randomStatetest221",
      # "randomStatetest222",
      # "randomStatetest223",
      # "randomStatetest225",
      # "randomStatetest226",
      # "randomStatetest227",
      # "randomStatetest228",
      # "randomStatetest229",
      # "randomStatetest23",
      # "randomStatetest230",
      # "randomStatetest231",
      # "randomStatetest232",
      # "randomStatetest233",
      # "randomStatetest236",
      # "randomStatetest237",
      # "randomStatetest238",
      # "randomStatetest24",
      # "randomStatetest241",
      # "randomStatetest242",
      # "randomStatetest243",
      # "randomStatetest244",
      # "randomStatetest245",
      # "randomStatetest246",
      # "randomStatetest247",
      # "randomStatetest248",
      # "randomStatetest249",
      # "randomStatetest25",
      # "randomStatetest250",
      # "randomStatetest251",
      # "randomStatetest252",
      # "randomStatetest254",
      # "randomStatetest257",
      # "randomStatetest259",
      # "randomStatetest26",
      # "randomStatetest260",
      # "randomStatetest261",
      # "randomStatetest263",
      # "randomStatetest264",
      # "randomStatetest265",
      # "randomStatetest266",
      # "randomStatetest267",
      # "randomStatetest268",
      # "randomStatetest269",
      # "randomStatetest27",
      # "randomStatetest270",
      # "randomStatetest271",
      # "randomStatetest273",
      # "randomStatetest274",
      # "randomStatetest275",
      # "randomStatetest276",
      # "randomStatetest278",
      # "randomStatetest279",
      # "randomStatetest28",
      # "randomStatetest280",
      # "randomStatetest281",
      # "randomStatetest282",
      # "randomStatetest283",
      # "randomStatetest285",
      # "randomStatetest286",
      # "randomStatetest287",
      # "randomStatetest288",
      # "randomStatetest29",
      # "randomStatetest290",
      # "randomStatetest291",
      # "randomStatetest292",
      # "randomStatetest293",
      # "randomStatetest294",
      # "randomStatetest295",
      # "randomStatetest296",
      # "randomStatetest297",
      # "randomStatetest298",
      # "randomStatetest299",
      # "randomStatetest3",
      # "randomStatetest30",
      # "randomStatetest300",
      # "randomStatetest301",
      # "randomStatetest302",
      # "randomStatetest303",
      # "randomStatetest304",
      # "randomStatetest305",
      # "randomStatetest306",
      # "randomStatetest307",
      # "randomStatetest308",
      # "randomStatetest309",
      # "randomStatetest31",
      # "randomStatetest310",
      # "randomStatetest311",
      # "randomStatetest312",
      # "randomStatetest313",
      # "randomStatetest315",
      # "randomStatetest316",
      # "randomStatetest318",
      # "randomStatetest32",
      # "randomStatetest320",
      # "randomStatetest321",
      # "randomStatetest322",
      # "randomStatetest323",
      # "randomStatetest324",
      # "randomStatetest325",
      # "randomStatetest326",
      # "randomStatetest327",
      # "randomStatetest328",
      # "randomStatetest329",
      # "randomStatetest33",
      # "randomStatetest332",
      # "randomStatetest333",
      # "randomStatetest334",
      # "randomStatetest335",
      # "randomStatetest336",
      # "randomStatetest337",
      # "randomStatetest338",
      # "randomStatetest339",
      # "randomStatetest340",
      # "randomStatetest341",
      # "randomStatetest342",
      # "randomStatetest343",
      # "randomStatetest345",
      # "randomStatetest346",
      # "randomStatetest347",
      # "randomStatetest348",
      # "randomStatetest349",
      # "randomStatetest350",
      # "randomStatetest351",
      # "randomStatetest352",
      # "randomStatetest353",
      # "randomStatetest354",
      # "randomStatetest355",
      # "randomStatetest356",
      # "randomStatetest357",
      # "randomStatetest358",
      # "randomStatetest359",
      # "randomStatetest36",
      # "randomStatetest360",
      # "randomStatetest361",
      # "randomStatetest362",
      # "randomStatetest363",
      # "randomStatetest364",
      # "randomStatetest365",
      # "randomStatetest366",
      # "randomStatetest367",
      # "randomStatetest368",
      # "randomStatetest369",
      # "randomStatetest37",
      # "randomStatetest370",
      # "randomStatetest371",
      # "randomStatetest372",
      # "randomStatetest375",
      # "randomStatetest376",
      # "randomStatetest377",
      # "randomStatetest378",
      # "randomStatetest379",
      # "randomStatetest38",
      # "randomStatetest380",
      # "randomStatetest381",
      # "randomStatetest382",
      # "randomStatetest383",
      # "randomStatetest39",
      # "randomStatetest4",
      # "randomStatetest41",
      # "randomStatetest42",
      # "randomStatetest43",
      # "randomStatetest45",
      # "randomStatetest46",
      # "randomStatetest47",
      # "randomStatetest48",
      # "randomStatetest49",
      # "randomStatetest5",
      # "randomStatetest50",
      # "randomStatetest51",
      # "randomStatetest52",
      # "randomStatetest53",
      # "randomStatetest54",
      # "randomStatetest55",
      # "randomStatetest57",
      # "randomStatetest58",
      # "randomStatetest59",
      # "randomStatetest6",
      # "randomStatetest60",
      # "randomStatetest62",
      # "randomStatetest63",
      # "randomStatetest64",
      # "randomStatetest66",
      # "randomStatetest67",
      # "randomStatetest69",
      # "randomStatetest7",
      # "randomStatetest72",
      # "randomStatetest73",
      # "randomStatetest74",
      # "randomStatetest75",
      # "randomStatetest77",
      # "randomStatetest78",
      # "randomStatetest80",
      # "randomStatetest81",
      # "randomStatetest82",
      # "randomStatetest83",
      # "randomStatetest84",
      # "randomStatetest85",
      # "randomStatetest87",
      # "randomStatetest88",
      # "randomStatetest89",
      # "randomStatetest9",
      # "randomStatetest90",
      # "randomStatetest92",
      # "randomStatetest94",
      # "randomStatetest95",
      # "randomStatetest96",
      # "randomStatetest97",
      # "randomStatetest98",
    ],
    "Random2" => [
      # "201503110226PYTHON_DUP6",
      # "randomStatetest",
      # "randomStatetest384",
      # "randomStatetest385",
      # "randomStatetest386",
      # "randomStatetest387",
      # "randomStatetest388",
      # "randomStatetest389",
      # "randomStatetest391",
      # "randomStatetest393",
      # "randomStatetest395",
      # "randomStatetest396",
      # "randomStatetest397",
      # "randomStatetest398",
      # "randomStatetest399",
      # "randomStatetest401",
      # "randomStatetest402",
      # "randomStatetest404",
      # "randomStatetest405",
      # "randomStatetest406",
      # "randomStatetest407",
      # "randomStatetest408",
      # "randomStatetest409",
      # "randomStatetest410",
      # "randomStatetest411",
      # "randomStatetest412",
      # "randomStatetest413",
      # "randomStatetest414",
      # "randomStatetest415",
      # "randomStatetest416",
      # "randomStatetest417",
      # "randomStatetest418",
      # "randomStatetest419",
      # "randomStatetest420",
      # "randomStatetest421",
      # "randomStatetest422",
      # "randomStatetest423",
      # "randomStatetest424",
      # "randomStatetest425",
      # "randomStatetest426",
      # "randomStatetest428",
      # "randomStatetest429",
      # "randomStatetest430",
      # "randomStatetest433",
      # "randomStatetest435",
      # "randomStatetest436",
      # "randomStatetest437",
      # "randomStatetest438",
      # "randomStatetest439",
      # "randomStatetest440",
      # "randomStatetest441",
      # "randomStatetest442",
      # "randomStatetest443",
      # "randomStatetest444",
      # "randomStatetest445",
      # "randomStatetest446",
      # "randomStatetest447",
      # "randomStatetest448",
      # "randomStatetest449",
      # "randomStatetest450",
      # "randomStatetest451",
      # "randomStatetest452",
      # "randomStatetest454",
      # "randomStatetest455",
      # "randomStatetest456",
      # "randomStatetest457",
      # "randomStatetest458",
      # "randomStatetest460",
      # "randomStatetest461",
      # "randomStatetest462",
      # "randomStatetest464",
      # "randomStatetest465",
      # "randomStatetest466",
      # "randomStatetest467",
      # "randomStatetest468",
      # "randomStatetest469",
      # "randomStatetest470",
      # "randomStatetest471",
      # "randomStatetest472",
      # "randomStatetest473",
      # "randomStatetest474",
      # "randomStatetest475",
      # "randomStatetest476",
      # "randomStatetest477",
      # "randomStatetest478",
      # "randomStatetest480",
      # "randomStatetest481",
      # "randomStatetest482",
      # "randomStatetest483",
      # "randomStatetest484",
      # "randomStatetest485",
      # "randomStatetest487",
      # "randomStatetest488",
      # "randomStatetest489",
      # "randomStatetest491",
      # "randomStatetest493",
      # "randomStatetest494",
      # "randomStatetest495",
      # "randomStatetest496",
      # "randomStatetest497",
      # "randomStatetest498",
      # "randomStatetest499",
      # "randomStatetest500",
      # "randomStatetest501",
      # "randomStatetest502",
      # "randomStatetest503",
      # "randomStatetest504",
      # "randomStatetest505",
      # "randomStatetest506",
      # "randomStatetest507",
      # "randomStatetest508",
      # "randomStatetest509",
      # "randomStatetest510",
      # "randomStatetest511",
      # "randomStatetest512",
      # "randomStatetest513",
      # "randomStatetest514",
      # "randomStatetest516",
      # "randomStatetest517",
      # "randomStatetest518",
      # "randomStatetest519",
      # "randomStatetest520",
      # "randomStatetest521",
      # "randomStatetest523",
      # "randomStatetest524",
      # "randomStatetest525",
      # "randomStatetest526",
      # "randomStatetest527",
      # "randomStatetest528",
      # "randomStatetest531",
      # "randomStatetest532",
      # "randomStatetest533",
      # "randomStatetest534",
      # "randomStatetest535",
      # "randomStatetest536",
      # "randomStatetest537",
      # "randomStatetest538",
      # "randomStatetest539",
      # "randomStatetest541",
      # "randomStatetest542",
      # "randomStatetest543",
      # "randomStatetest544",
      # "randomStatetest545",
      # "randomStatetest546",
      # "randomStatetest547",
      # "randomStatetest548",
      # "randomStatetest549",
      # "randomStatetest550",
      # "randomStatetest552",
      # "randomStatetest553",
      # "randomStatetest554",
      # "randomStatetest555",
      # "randomStatetest556",
      # "randomStatetest558",
      # "randomStatetest559",
      # "randomStatetest560",
      # "randomStatetest562",
      # "randomStatetest563",
      # "randomStatetest564",
      # "randomStatetest565",
      # "randomStatetest566",
      # "randomStatetest567",
      # "randomStatetest569",
      # "randomStatetest571",
      # "randomStatetest572",
      # "randomStatetest573",
      # "randomStatetest574",
      # "randomStatetest575",
      # "randomStatetest576",
      # "randomStatetest577",
      # "randomStatetest578",
      # "randomStatetest579",
      # "randomStatetest580",
      # "randomStatetest581",
      # "randomStatetest582",
      # "randomStatetest583",
      # "randomStatetest584",
      # "randomStatetest585",
      # "randomStatetest586",
      # "randomStatetest587",
      # "randomStatetest588",
      # "randomStatetest589",
      # "randomStatetest592",
      # "randomStatetest594",
      # "randomStatetest596",
      # "randomStatetest597",
      # "randomStatetest599",
      # "randomStatetest600",
      # "randomStatetest601",
      # "randomStatetest602",
      # "randomStatetest603",
      # "randomStatetest604",
      # "randomStatetest605",
      # "randomStatetest607",
      # "randomStatetest608",
      # "randomStatetest609",
      # "randomStatetest610",
      # "randomStatetest611",
      # "randomStatetest612",
      # "randomStatetest615",
      # "randomStatetest616",
      # "randomStatetest618",
      # "randomStatetest619",
      # "randomStatetest620",
      # "randomStatetest621",
      # "randomStatetest624",
      # "randomStatetest625",
      # "randomStatetest626",
      # "randomStatetest627",
      # "randomStatetest628",
      # "randomStatetest629",
      # "randomStatetest630",
      # "randomStatetest632",
      # "randomStatetest633",
      # "randomStatetest635",
      # "randomStatetest636",
      # "randomStatetest637",
      # "randomStatetest638",
      # "randomStatetest639",
      # "randomStatetest640",
      # "randomStatetest641",
      # "randomStatetest642",
      # "randomStatetest643",
      # "randomStatetest644",
      # "randomStatetest645",
      # "randomStatetest646",
      # "randomStatetest647",
    ],
    "RecursiveCreate" => [
      # "recursiveCreate",
      # "recursiveCreateReturnValue",
    ],
    "RefundTest" => [
      # "refund50_1",
      # "refund50_2",
      # "refund50percentCap",
      # "refund600",
      # "refundSuicide50procentCap",
      # "refund_CallA",
      # "refund_CallA_OOG",
      # "refund_CallA_notEnoughGasInCall",
      # "refund_CallToSuicideNoStorage",
      # "refund_CallToSuicideStorage",
      # "refund_CallToSuicideTwice",
      # "refund_NoOOG_1",
      # "refund_OOG",
      "refund_TxToSuicide",
      # "refund_TxToSuicideOOG",
      # "refund_changeNonZeroStorage",
      # "refund_getEtherBack",
      # "refund_multimpleSuicide",
      "refund_singleSuicide"
    ],
    "ReturnDataTest" => [
      # "call_ecrec_success_empty_then_returndatasize",
      # "call_outsize_then_create_successful_then_returndatasize",
      # "call_then_call_value_fail_then_returndatasize",
      # "call_then_create_successful_then_returndatasize",
      # "create_callprecompile_returndatasize",
      # "modexp_modsize0_returndatasize",
      # "returndatacopy_0_0_following_successful_create",
      # "returndatacopy_afterFailing_create",
      # "returndatacopy_after_failing_callcode",
      # "returndatacopy_after_failing_delegatecall",
      # "returndatacopy_after_failing_staticcall",
      # "returndatacopy_after_revert_in_staticcall",
      # "returndatacopy_after_successful_callcode",
      # "returndatacopy_after_successful_delegatecall",
      # "returndatacopy_after_successful_staticcall",
      # "returndatacopy_following_call",
      # "returndatacopy_following_create",
      # "returndatacopy_following_failing_call",
      # "returndatacopy_following_revert",
      # "returndatacopy_following_revert_in_create",
      # "returndatacopy_following_successful_create",
      # "returndatacopy_following_too_big_transfer",
      # "returndatacopy_initial",
      # "returndatacopy_initial_256",
      # "returndatacopy_initial_big_sum",
      # "returndatacopy_overrun",
      # "returndatasize_after_failing_callcode",
      # "returndatasize_after_failing_delegatecall",
      # "returndatasize_after_failing_staticcall",
      # "returndatasize_after_oog_after_deeper",
      # "returndatasize_after_successful_callcode",
      # "returndatasize_after_successful_delegatecall",
      # "returndatasize_after_successful_staticcall",
      # "returndatasize_bug",
      # "returndatasize_following_successful_create",
      # "returndatasize_initial",
      # "returndatasize_initial_zero_read",
    ],
    "RevertTest" => [
      # "LoopCallsDepthThenRevert",
      # "LoopCallsDepthThenRevert2",
      # "LoopCallsDepthThenRevert3",
      # "LoopCallsThenRevert",
      # "LoopDelegateCallsDepthThenRevert",
      "NashatyrevSuicideRevert",
      # "PythonRevertTestTue201814-1430",
      # "RevertDepth2",
      # "RevertDepthCreateAddressCollision",
      # "RevertDepthCreateOOG",
      # "RevertInCallCode",
      # "RevertInCreateInInit",
      # "RevertInDelegateCall",
      # "RevertInStaticCall",
      # "RevertOnEmptyStack",
      # "RevertOpcode",
      # "RevertOpcodeCalls",
      # "RevertOpcodeCreate",
      # "RevertOpcodeDirectCall",
      # "RevertOpcodeInCallsOnNonEmptyReturnData",
      # "RevertOpcodeInCreateReturns",
      # "RevertOpcodeInInit",
      # "RevertOpcodeMultipleSubCalls",
      # "RevertOpcodeReturn",
      # "RevertOpcodeWithBigOutputInInit",
      # "RevertPrecompiledTouch",
      # "RevertPrecompiledTouchCC",
      # "RevertPrecompiledTouchDC",
      # "RevertPrefound",
      "RevertPrefoundCall",
      # "RevertPrefoundCallOOG",
      # "RevertPrefoundEmpty",
      "RevertPrefoundEmptyCall"
      # "RevertPrefoundEmptyCallOOG",
      # "RevertPrefoundEmptyOOG",
      # "RevertPrefoundOOG",
      # "RevertRemoteSubCallStorageOOG",
      # "RevertRemoteSubCallStorageOOG2",
      # "RevertSubCallStorageOOG",
      # "RevertSubCallStorageOOG2",
      # "TouchToEmptyAccountRevert",
      # "TouchToEmptyAccountRevert2",
      # "TouchToEmptyAccountRevert3",
    ],
    "Shift" => [
      # "sar01",
      # "sar10",
      # "sar11",
      # "sar_2^254_254",
      # "sar_2^255-1_248",
      # "sar_2^255-1_254",
      # "sar_2^255-1_255",
      # "sar_2^255-1_256",
      # "sar_2^255_1",
      # "sar_2^255_255",
      # "sar_2^255_256",
      # "sar_2^255_257",
      # "sar_2^256-1_0",
      # "sar_2^256-1_1",
      # "sar_2^256-1_255",
      # "sar_2^256-1_256",
      # "shl01",
      # "shl01-0100",
      # "shl01-0101",
      # "shl01-ff",
      # "shl10",
      # "shl11",
      # "shl_-1_0",
      # "shl_-1_1",
      # "shl_-1_255",
      # "shl_-1_256",
      # "shl_2^255-1_1",
      # "shr01",
      # "shr10",
      # "shr11",
      # "shr_-1_0",
      # "shr_-1_1",
      # "shr_-1_255",
      # "shr_-1_256",
      # "shr_2^255_1",
      # "shr_2^255_255",
      # "shr_2^255_256",
      # "shr_2^255_257",
    ],
    "SolidityTest" => [
      # "AmbiguousMethod",
      # "CallInfiniteLoop",
      # "CallLowLevelCreatesSolidity",
      # "CallRecursiveMethods",
      # "ContractInheritance",
      # "CreateContractFromMethod",
      # "RecursiveCreateContracts",
      # "RecursiveCreateContractsCreate4Contracts",
      # "TestBlockAndTransactionProperties",
      # "TestContractInteraction",
      # "TestContractSuicide",
      # "TestCryptographicFunctions",
      # "TestKeywords",
      # "TestOverflow",
      # "TestStoreGasPrices",
      # "TestStructuresAndVariabless",
    ],
    "SpecialTest" => [
      # "FailedCreateRevertsDeletion",
      # "JUMPDEST_Attack",
      # "JUMPDEST_AttackwithJump",
      # "OverflowGasMakeMoney",
      # "StackDepthLimitSEC",
      # "block504980",
      # "deploymentError",
      # "failed_tx_xcf416c53",
      # "gasPrice0",
      # "makeMoney",
      # "sha3_deja",
      # "txCost-sec73",
      # "tx_e1c174e2",
    ],
    "StackTests" => [
      # "shallowStack",
      # "stackOverflow",
      # "stackOverflowDUP",
      # "stackOverflowM1",
      # "stackOverflowM1DUP",
      # "stackOverflowM1PUSH",
      # "stackOverflowPUSH",
    ],
    "StaticCall" => [
      # "static_ABAcalls0",
      # "static_ABAcalls1",
      # "static_ABAcalls2",
      # "static_ABAcalls3",
      # "static_ABAcallsSuicide0",
      # "static_ABAcallsSuicide1",
      # "static_CALL_OneVCallSuicide",
      # "static_CALL_ZeroVCallSuicide",
      # "static_CREATE_ContractSuicideDuringInit",
      # "static_CREATE_ContractSuicideDuringInit_ThenStoreThenReturn",
      # "static_CREATE_ContractSuicideDuringInit_WithValue",
      # "static_CREATE_EmptyContractAndCallIt_0wei",
      # "static_CREATE_EmptyContractWithStorageAndCallIt_0wei",
      # "static_Call10",
      # "static_Call1024BalanceTooLow",
      # "static_Call1024BalanceTooLow2",
      # "static_Call1024OOG",
      # "static_Call1024PreCalls",
      # "static_Call1024PreCalls2",
      # "static_Call1024PreCalls3",
      # "static_Call1MB1024Calldepth",
      # "static_Call50000",
      # "static_Call50000_ecrec",
      # "static_Call50000_identity",
      # "static_Call50000_identity2",
      # "static_Call50000_rip160",
      # "static_Call50000_sha256",
      # "static_Call50000bytesContract50_1",
      # "static_Call50000bytesContract50_2",
      # "static_Call50000bytesContract50_3",
      # "static_CallAndCallcodeConsumeMoreGasThenTransactionHas",
      # "static_CallAskMoreGasOnDepth2ThenTransactionHas",
      # "static_CallContractToCreateContractAndCallItOOG",
      # "static_CallContractToCreateContractOOG",
      # "static_CallContractToCreateContractOOGBonusGas",
      # "static_CallContractToCreateContractWhichWouldCreateContractIfCalled",
      # "static_CallEcrecover0",
      # "static_CallEcrecover0_0input",
      # "static_CallEcrecover0_Gas2999",
      # "static_CallEcrecover0_NoGas",
      # "static_CallEcrecover0_completeReturnValue",
      # "static_CallEcrecover0_gas3000",
      # "static_CallEcrecover0_overlappingInputOutput",
      # "static_CallEcrecover1",
      # "static_CallEcrecover2",
      # "static_CallEcrecover3",
      # "static_CallEcrecover80",
      # "static_CallEcrecoverCheckLength",
      # "static_CallEcrecoverCheckLengthWrongV",
      # "static_CallEcrecoverH_prefixed0",
      # "static_CallEcrecoverR_prefixed0",
      # "static_CallEcrecoverS_prefixed0",
      # "static_CallEcrecoverV_prefixed0",
      # "static_CallGoesOOGOnSecondLevel",
      # "static_CallGoesOOGOnSecondLevel2",
      # "static_CallIdentitiy_1",
      # "static_CallIdentity_1_nonzeroValue",
      # "static_CallIdentity_2",
      # "static_CallIdentity_3",
      # "static_CallIdentity_4",
      # "static_CallIdentity_4_gas17",
      # "static_CallIdentity_4_gas18",
      # "static_CallIdentity_5",
      # "static_CallLoseGasOOG",
      # "static_CallRecursiveBomb0",
      # "static_CallRecursiveBomb0_OOG_atMaxCallDepth",
      # "static_CallRecursiveBomb1",
      # "static_CallRecursiveBomb2",
      # "static_CallRecursiveBomb3",
      # "static_CallRecursiveBombLog",
      # "static_CallRecursiveBombLog2",
      # "static_CallRecursiveBombPreCall",
      # "static_CallRecursiveBombPreCall2",
      # "static_CallRipemd160_1",
      # "static_CallRipemd160_2",
      # "static_CallRipemd160_3",
      # "static_CallRipemd160_3_postfixed0",
      # "static_CallRipemd160_3_prefixed0",
      # "static_CallRipemd160_4",
      # "static_CallRipemd160_4_gas719",
      # "static_CallRipemd160_5",
      # "static_CallSha256_1",
      # "static_CallSha256_1_nonzeroValue",
      # "static_CallSha256_2",
      # "static_CallSha256_3",
      # "static_CallSha256_3_postfix0",
      # "static_CallSha256_3_prefix0",
      # "static_CallSha256_4",
      # "static_CallSha256_4_gas99",
      # "static_CallSha256_5",
      # "static_CallToNameRegistrator0",
      # "static_CallToReturn1",
      # "static_CalltoReturn2",
      # "static_CheckCallCostOOG",
      # "static_CheckOpcodes",
      # "static_CheckOpcodes2",
      # "static_CheckOpcodes3",
      # "static_CheckOpcodes4",
      # "static_CheckOpcodes5",
      # "static_ExecuteCallThatAskForeGasThenTrabsactionHas",
      # "static_InternalCallHittingGasLimit",
      # "static_InternalCallHittingGasLimit2",
      # "static_InternlCallStoreClearsOOG",
      # "static_LoopCallsDepthThenRevert",
      # "static_LoopCallsDepthThenRevert2",
      # "static_LoopCallsDepthThenRevert3",
      # "static_LoopCallsThenRevert",
      # "static_PostToReturn1",
      # "static_RETURN_Bounds",
      # "static_RETURN_BoundsOOG",
      # "static_RawCallGasAsk",
      # "static_Return50000_2",
      # "static_ReturnTest",
      # "static_ReturnTest2",
      # "static_RevertDepth2",
      # "static_RevertOpcodeCalls",
      # "static_ZeroValue_CALL_OOGRevert",
      # "static_ZeroValue_SUICIDE_OOGRevert",
      # "static_callBasic",
      # "static_callChangeRevert",
      # "static_callCreate",
      # "static_callCreate2",
      # "static_callCreate3",
      # "static_callOutput1",
      # "static_callOutput2",
      # "static_callOutput3",
      # "static_callOutput3Fail",
      # "static_callOutput3partial",
      # "static_callOutput3partialFail",
      # "static_callToCallCodeOpCodeCheck",
      # "static_callToCallOpCodeCheck",
      # "static_callToDelCallOpCodeCheck",
      # "static_callToStaticOpCodeCheck",
      # "static_callWithHighValue",
      # "static_callWithHighValueAndGasOOG",
      # "static_callWithHighValueAndOOGatTxLevel",
      # "static_callWithHighValueOOGinCall",
      # "static_call_OOG_additionalGasCosts1",
      # "static_call_OOG_additionalGasCosts2",
      # "static_call_value_inherit",
      # "static_call_value_inherit_from_call",
      # "static_callcall_00",
      # "static_callcall_00_OOGE",
      # "static_callcall_00_OOGE_1",
      # "static_callcall_00_OOGE_2",
      # "static_callcall_00_SuicideEnd",
      # "static_callcallcall_000",
      # "static_callcallcall_000_OOGE",
      # "static_callcallcall_000_OOGMAfter",
      # "static_callcallcall_000_OOGMAfter2",
      # "static_callcallcall_000_OOGMBefore",
      # "static_callcallcall_000_SuicideEnd",
      # "static_callcallcall_000_SuicideMiddle",
      # "static_callcallcall_ABCB_RECURSIVE",
      # "static_callcallcallcode_001",
      # "static_callcallcallcode_001_2",
      # "static_callcallcallcode_001_OOGE",
      # "static_callcallcallcode_001_OOGE_2",
      # "static_callcallcallcode_001_OOGMAfter",
      # "static_callcallcallcode_001_OOGMAfter2",
      # "static_callcallcallcode_001_OOGMAfter_2",
      # "static_callcallcallcode_001_OOGMAfter_3",
      # "static_callcallcallcode_001_OOGMBefore",
      # "static_callcallcallcode_001_OOGMBefore2",
      # "static_callcallcallcode_001_SuicideEnd",
      # "static_callcallcallcode_001_SuicideEnd2",
      # "static_callcallcallcode_001_SuicideMiddle",
      # "static_callcallcallcode_001_SuicideMiddle2",
      # "static_callcallcallcode_ABCB_RECURSIVE",
      # "static_callcallcallcode_ABCB_RECURSIVE2",
      # "static_callcallcode_01_2",
      # "static_callcallcode_01_OOGE_2",
      # "static_callcallcode_01_SuicideEnd",
      # "static_callcallcode_01_SuicideEnd2",
      # "static_callcallcodecall_010",
      # "static_callcallcodecall_010_2",
      # "static_callcallcodecall_010_OOGE",
      # "static_callcallcodecall_010_OOGE_2",
      # "static_callcallcodecall_010_OOGMAfter",
      # "static_callcallcodecall_010_OOGMAfter2",
      # "static_callcallcodecall_010_OOGMAfter_2",
      # "static_callcallcodecall_010_OOGMAfter_3",
      # "static_callcallcodecall_010_OOGMBefore",
      # "static_callcallcodecall_010_OOGMBefore2",
      # "static_callcallcodecall_010_SuicideEnd",
      # "static_callcallcodecall_010_SuicideEnd2",
      # "static_callcallcodecall_010_SuicideMiddle",
      # "static_callcallcodecall_010_SuicideMiddle2",
      # "static_callcallcodecall_ABCB_RECURSIVE",
      # "static_callcallcodecall_ABCB_RECURSIVE2",
      # "static_callcallcodecallcode_011",
      # "static_callcallcodecallcode_011_2",
      # "static_callcallcodecallcode_011_OOGE",
      # "static_callcallcodecallcode_011_OOGE_2",
      # "static_callcallcodecallcode_011_OOGMAfter",
      # "static_callcallcodecallcode_011_OOGMAfter2",
      # "static_callcallcodecallcode_011_OOGMAfter_1",
      # "static_callcallcodecallcode_011_OOGMAfter_2",
      # "static_callcallcodecallcode_011_OOGMBefore",
      # "static_callcallcodecallcode_011_OOGMBefore2",
      # "static_callcallcodecallcode_011_SuicideEnd",
      # "static_callcallcodecallcode_011_SuicideEnd2",
      # "static_callcallcodecallcode_011_SuicideMiddle",
      # "static_callcallcodecallcode_011_SuicideMiddle2",
      # "static_callcallcodecallcode_ABCB_RECURSIVE",
      # "static_callcallcodecallcode_ABCB_RECURSIVE2",
      # "static_callcode_checkPC",
      # "static_callcodecall_10",
      # "static_callcodecall_10_2",
      # "static_callcodecall_10_OOGE",
      # "static_callcodecall_10_OOGE_2",
      # "static_callcodecall_10_SuicideEnd",
      # "static_callcodecall_10_SuicideEnd2",
      # "static_callcodecallcall_100",
      # "static_callcodecallcall_100_2",
      # "static_callcodecallcall_100_OOGE",
      # "static_callcodecallcall_100_OOGE2",
      # "static_callcodecallcall_100_OOGMAfter",
      # "static_callcodecallcall_100_OOGMAfter2",
      # "static_callcodecallcall_100_OOGMAfter_2",
      # "static_callcodecallcall_100_OOGMAfter_3",
      # "static_callcodecallcall_100_OOGMBefore",
      # "static_callcodecallcall_100_OOGMBefore2",
      # "static_callcodecallcall_100_SuicideEnd",
      # "static_callcodecallcall_100_SuicideEnd2",
      # "static_callcodecallcall_100_SuicideMiddle",
      # "static_callcodecallcall_100_SuicideMiddle2",
      # "static_callcodecallcall_ABCB_RECURSIVE",
      # "static_callcodecallcall_ABCB_RECURSIVE2",
      # "static_callcodecallcallcode_101",
      # "static_callcodecallcallcode_101_2",
      # "static_callcodecallcallcode_101_OOGE",
      # "static_callcodecallcallcode_101_OOGE_2",
      # "static_callcodecallcallcode_101_OOGMAfter",
      # "static_callcodecallcallcode_101_OOGMAfter2",
      # "static_callcodecallcallcode_101_OOGMAfter_1",
      # "static_callcodecallcallcode_101_OOGMAfter_3",
      # "static_callcodecallcallcode_101_OOGMBefore",
      # "static_callcodecallcallcode_101_OOGMBefore2",
      # "static_callcodecallcallcode_101_SuicideEnd",
      # "static_callcodecallcallcode_101_SuicideEnd2",
      # "static_callcodecallcallcode_101_SuicideMiddle",
      # "static_callcodecallcallcode_101_SuicideMiddle2",
      # "static_callcodecallcallcode_ABCB_RECURSIVE",
      # "static_callcodecallcallcode_ABCB_RECURSIVE2",
      # "static_callcodecallcodecall_110",
      # "static_callcodecallcodecall_1102",
      # "static_callcodecallcodecall_110_2",
      # "static_callcodecallcodecall_110_OOGE",
      # "static_callcodecallcodecall_110_OOGE2",
      # "static_callcodecallcodecall_110_OOGMAfter",
      # "static_callcodecallcodecall_110_OOGMAfter2",
      # "static_callcodecallcodecall_110_OOGMAfter_2",
      # "static_callcodecallcodecall_110_OOGMAfter_3",
      # "static_callcodecallcodecall_110_OOGMBefore",
      # "static_callcodecallcodecall_110_OOGMBefore2",
      # "static_callcodecallcodecall_110_SuicideEnd",
      # "static_callcodecallcodecall_110_SuicideEnd2",
      # "static_callcodecallcodecall_110_SuicideMiddle",
      # "static_callcodecallcodecall_110_SuicideMiddle2",
      # "static_callcodecallcodecall_ABCB_RECURSIVE",
      # "static_callcodecallcodecall_ABCB_RECURSIVE2",
      # "static_callcodecallcodecallcode_111_SuicideEnd",
      # "static_calldelcode_01",
      # "static_calldelcode_01_OOGE",
      # "static_contractCreationMakeCallThatAskMoreGasThenTransactionProvided",
      # "static_contractCreationOOGdontLeaveEmptyContractViaTransaction",
      # "static_log0_emptyMem",
      # "static_log0_logMemStartTooHigh",
      # "static_log0_logMemsizeTooHigh",
      # "static_log0_logMemsizeZero",
      # "static_log0_nonEmptyMem",
      # "static_log0_nonEmptyMem_logMemSize1",
      # "static_log0_nonEmptyMem_logMemSize1_logMemStart31",
      # "static_log1_MaxTopic",
      # "static_log1_emptyMem",
      # "static_log1_logMemStartTooHigh",
      # "static_log1_logMemsizeTooHigh",
      # "static_log1_logMemsizeZero",
      # "static_log_Caller",
      # "static_makeMoney",
      # "static_refund_CallA",
      # "static_refund_CallToSuicideNoStorage",
      # "static_refund_CallToSuicideTwice",
    ],
    "SystemOperationsTest" => [
      "ABAcalls0",
      "ABAcalls1",
      "ABAcalls2",
      "ABAcalls3",
      "ABAcallsSuicide0",
      "ABAcallsSuicide1",
      "Call10",
      "CallRecursiveBomb0",
      "CallRecursiveBomb0_OOG_atMaxCallDepth",
      "CallRecursiveBomb1",
      # "CallRecursiveBomb2",
      # "CallRecursiveBomb3",
      "CallRecursiveBombLog",
      "CallRecursiveBombLog2",
      "CallToNameRegistrator0",
      "CallToNameRegistratorAddressTooBigLeft",
      "CallToNameRegistratorAddressTooBigRight",
      # "CallToNameRegistratorMemOOGAndInsufficientBalance",
      "CallToNameRegistratorNotMuchMemory0",
      "CallToNameRegistratorNotMuchMemory1",
      "CallToNameRegistratorOutOfGas",
      # "CallToNameRegistratorTooMuchMemory0",
      # "CallToNameRegistratorTooMuchMemory1",
      # "CallToNameRegistratorTooMuchMemory2",
      "CallToNameRegistratorZeorSizeMemExpansion",
      # "CallToReturn1",
      # "CallToReturn1ForDynamicJump0",
      # "CallToReturn1ForDynamicJump1",
      "CalltoReturn2",
      # "CreateHashCollision",
      "PostToReturn1",
      "TestNameRegistrator",
      # "balanceInputAddressTooBig",
      "callValue",
      "callcodeTo0",
      "callcodeToNameRegistrator0",
      "callcodeToNameRegistratorAddresTooBigLeft",
      "callcodeToNameRegistratorAddresTooBigRight",
      "callcodeToNameRegistratorZeroMemExpanion",
      "callcodeToReturn1",
      # "callerAccountBalance",
      # "createNameRegistrator",
      # "createNameRegistratorOOG_MemExpansionOOV",
      # "createNameRegistratorOutOfMemoryBonds0",
      # "createNameRegistratorOutOfMemoryBonds1",
      "createNameRegistratorValueTooHigh",
      # "createNameRegistratorZeroMem",
      # "createNameRegistratorZeroMem2",
      # "createNameRegistratorZeroMemExpansion",
      # "createWithInvalidOpcode",
      # "currentAccountBalance",
      # "doubleSelfdestructTest",
      # "doubleSelfdestructTest2",
      # "extcodecopy",
      "return0",
      "return1",
      "return2",
      "suicideAddress",
      "suicideCaller",
      "suicideCallerAddresTooBigLeft",
      "suicideCallerAddresTooBigRight",
      # "suicideCoinbase",
      "suicideNotExistingAccount",
      "suicideOrigin",
      # "suicideSendEtherPostDeath",
      "suicideSendEtherToMe"
      # "testRandomTest",
    ],
    "TransactionTest" => [
      # "ContractStoreClearsOOG",
      # "ContractStoreClearsSuccess",
      # "CreateMessageReverted",
      # "CreateMessageSuccess",
      # "CreateTransactionReverted",
      # "CreateTransactionSuccess",
      # "EmptyTransaction",
      # "EmptyTransaction2",
      # "EmptyTransaction3",
      "HighGasLimit",
      # "InternalCallHittingGasLimit",
      # "InternalCallHittingGasLimit2",
      "InternalCallHittingGasLimitSuccess",
      # "InternlCallStoreClearsOOG",
      # "InternlCallStoreClearsSucces",
      # "Opcodes_TransactionInit",
      # "OverflowGasRequire",
      "OverflowGasRequire2",
      # "RefundOverflow",
      # "RefundOverflow2",
      # "StoreClearsAndInternlCallStoreClearsOOG",
      # "StoreClearsAndInternlCallStoreClearsSuccess",
      # "StoreGasOnCreate",
      # "SuicidesAndInternlCallSuicidesBonusGasAtCall",
      "SuicidesAndInternlCallSuicidesBonusGasAtCallFailed",
      # "SuicidesAndInternlCallSuicidesOOG",
      # "SuicidesAndInternlCallSuicidesSuccess",
      "SuicidesAndSendMoneyToItselfEtherDestroyed",
      # "SuicidesMixingCoinbase",
      "SuicidesStopAfterSuicide",
      "TransactionDataCosts652",
      "TransactionFromCoinbaseHittingBlockGasLimit",
      # "TransactionFromCoinbaseHittingBlockGasLimit1",
      # "TransactionFromCoinbaseNotEnoughFounds",
      # "TransactionNonceCheck",
      # "TransactionNonceCheck2",
      # "TransactionSendingToEmpty",
      "TransactionSendingToZero",
      "TransactionToAddressh160minusOne",
      "TransactionToItself",
      # "TransactionToItselfNotEnoughFounds",
      # "UserTransactionGasLimitIsTooLowWhenZeroCost",
      "UserTransactionZeroCost",
      "UserTransactionZeroCostWithData"
    ],
    "TransitionTest" => [
      # "createNameRegistratorPerTxsAfter",
      # "createNameRegistratorPerTxsAt",
      # "createNameRegistratorPerTxsBefore",
      # "createNameRegistratorPerTxsNotEnoughGasAfter",
      # "createNameRegistratorPerTxsNotEnoughGasAt",
      # "createNameRegistratorPerTxsNotEnoughGasBefore",
      # "delegatecallAfterTransition",
      # "delegatecallAtTransition",
      # "delegatecallBeforeTransition",
    ],
    "WalletTest" => [
      # "dayLimitConstruction",
      # "dayLimitConstructionOOG",
      # "dayLimitConstructionPartial",
      # "dayLimitResetSpentToday",
      # "dayLimitSetDailyLimit",
      # "dayLimitSetDailyLimitNoData",
      # "multiOwnedAddOwner",
      # "multiOwnedAddOwnerAddMyself",
      # "multiOwnedChangeOwner",
      # "multiOwnedChangeOwnerNoArgument",
      # "multiOwnedChangeOwner_fromNotOwner",
      # "multiOwnedChangeOwner_toIsOwner",
      # "multiOwnedChangeRequirementTo0",
      # "multiOwnedChangeRequirementTo1",
      # "multiOwnedChangeRequirementTo2",
      # "multiOwnedConstructionCorrect",
      # "multiOwnedConstructionNotEnoughGas",
      # "multiOwnedConstructionNotEnoughGasPartial",
      # "multiOwnedIsOwnerFalse",
      # "multiOwnedIsOwnerTrue",
      # "multiOwnedRemoveOwner",
      # "multiOwnedRemoveOwnerByNonOwner",
      # "multiOwnedRemoveOwner_mySelf",
      # "multiOwnedRemoveOwner_ownerIsNotOwner",
      # "multiOwnedRevokeNothing",
      # "walletAddOwnerRemovePendingTransaction",
      # "walletChangeOwnerRemovePendingTransaction",
      # "walletChangeRequirementRemovePendingTransaction",
      # "walletConfirm",
      # "walletConstruction",
      # "walletConstructionOOG",
      # "walletConstructionPartial",
      # "walletDefault",
      # "walletDefaultWithOutValue",
      # "walletExecuteOverDailyLimitMultiOwner",
      # "walletExecuteOverDailyLimitOnlyOneOwner",
      # "walletExecuteOverDailyLimitOnlyOneOwnerNew",
      # "walletExecuteUnderDailyLimit",
      # "walletKill",
      # "walletKillNotByOwner",
      # "walletKillToWallet",
      # "walletRemoveOwnerRemovePendingTransaction",
    ],
    "ZeroCallsRevert" => [
      # "ZeroValue_CALLCODE_OOGRevert",
      # "ZeroValue_CALLCODE_ToEmpty_OOGRevert",
      # "ZeroValue_CALLCODE_ToNonZeroBalance_OOGRevert",
      # "ZeroValue_CALLCODE_ToOneStorageKey_OOGRevert",
      # "ZeroValue_CALL_OOGRevert",
      # "ZeroValue_CALL_ToEmpty_OOGRevert",
      # "ZeroValue_CALL_ToNonZeroBalance_OOGRevert",
      # "ZeroValue_CALL_ToOneStorageKey_OOGRevert",
      # "ZeroValue_DELEGATECALL_OOGRevert",
      # "ZeroValue_DELEGATECALL_ToEmpty_OOGRevert",
      # "ZeroValue_DELEGATECALL_ToNonZeroBalance_OOGRevert",
      # "ZeroValue_DELEGATECALL_ToOneStorageKey_OOGRevert",
      # "ZeroValue_SUICIDE_OOGRevert",
      # "ZeroValue_SUICIDE_ToEmpty_OOGRevert",
      # "ZeroValue_SUICIDE_ToNonZeroBalance_OOGRevert",
      # "ZeroValue_SUICIDE_ToOneStorageKey_OOGRevert",
      # "ZeroValue_TransactionCALL_OOGRevert",
      # "ZeroValue_TransactionCALL_ToEmpty_OOGRevert",
      # "ZeroValue_TransactionCALL_ToNonZeroBalance_OOGRevert",
      # "ZeroValue_TransactionCALL_ToOneStorageKey_OOGRevert",
      # "ZeroValue_TransactionCALLwithData_OOGRevert",
      # "ZeroValue_TransactionCALLwithData_ToEmpty_OOGRevert",
      # "ZeroValue_TransactionCALLwithData_ToNonZeroBalance_OOGRevert",
      # "ZeroValue_TransactionCALLwithData_ToOneStorageKey_OOGRevert",
    ],
    "ZeroCallsTest" => [
      "ZeroValue_CALL",
      "ZeroValue_CALLCODE",
      "ZeroValue_CALLCODE_ToEmpty",
      "ZeroValue_CALLCODE_ToNonZeroBalance",
      # "ZeroValue_CALLCODE_ToOneStorageKey",
      "ZeroValue_CALL_ToEmpty",
      "ZeroValue_CALL_ToNonZeroBalance",
      # "ZeroValue_CALL_ToOneStorageKey",
      # "ZeroValue_DELEGATECALL",
      # "ZeroValue_DELEGATECALL_ToEmpty",
      # "ZeroValue_DELEGATECALL_ToNonZeroBalance",
      # "ZeroValue_DELEGATECALL_ToOneStorageKey",
      "ZeroValue_SUICIDE",
      "ZeroValue_SUICIDE_ToEmpty",
      "ZeroValue_SUICIDE_ToNonZeroBalance",
      # "ZeroValue_SUICIDE_ToOneStorageKey",
      "ZeroValue_TransactionCALL",
      "ZeroValue_TransactionCALL_ToEmpty",
      "ZeroValue_TransactionCALL_ToNonZeroBalance",
      # "ZeroValue_TransactionCALL_ToOneStorageKey",
      "ZeroValue_TransactionCALLwithData",
      "ZeroValue_TransactionCALLwithData_ToEmpty",
      "ZeroValue_TransactionCALLwithData_ToNonZeroBalance"
      # "ZeroValue_TransactionCALLwithData_ToOneStorageKey",
    ],
    "ZeroKnowledge" => [
      # "ecmul_1-2_2_28000_128",
      # "ecmul_1-2_2_28000_96",
      # "ecmul_1-2_340282366920938463463374607431768211456_21000_128",
      # "ecmul_1-2_340282366920938463463374607431768211456_21000_80",
      # "ecmul_1-2_340282366920938463463374607431768211456_21000_96",
      # "ecmul_1-2_340282366920938463463374607431768211456_28000_128",
      # "ecmul_1-2_340282366920938463463374607431768211456_28000_80",
      # "ecmul_1-2_340282366920938463463374607431768211456_28000_96",
      # "ecmul_1-2_5616_21000_128",
      # "ecmul_1-2_5616_21000_96",
      # "ecmul_1-2_5616_28000_128",
      # "ecmul_1-2_5617_21000_128",
      # "ecmul_1-2_5617_21000_96",
      # "ecmul_1-2_5617_28000_128",
      # "ecmul_1-2_5617_28000_96",
      # "ecmul_1-2_616_28000_96",
      # "ecmul_1-2_9935_21000_128",
      # "ecmul_1-2_9935_21000_96",
      # "ecmul_1-2_9935_28000_128",
      # "ecmul_1-2_9935_28000_96",
      # "ecmul_1-2_9_21000_128",
      # "ecmul_1-2_9_21000_96",
      # "ecmul_1-2_9_28000_128",
      # "ecmul_1-2_9_28000_96",
      # "ecmul_1-3_0_21000_128",
      # "ecmul_1-3_0_21000_64",
      # "ecmul_1-3_0_21000_80",
      # "ecmul_1-3_0_21000_96",
      # "ecmul_1-3_0_28000_128",
      # "ecmul_1-3_0_28000_64",
      # "ecmul_1-3_0_28000_80",
      # "ecmul_1-3_0_28000_96",
      # "ecmul_1-3_1_21000_128",
      # "ecmul_1-3_1_21000_96",
      # "ecmul_1-3_1_28000_128",
      # "ecmul_1-3_1_28000_96",
      # "ecmul_1-3_2_21000_128",
      # "ecmul_1-3_2_21000_96",
      # "ecmul_1-3_2_28000_128",
      # "ecmul_1-3_2_28000_96",
      # "ecmul_1-3_340282366920938463463374607431768211456_21000_128",
      # "ecmul_1-3_340282366920938463463374607431768211456_21000_80",
      # "ecmul_1-3_340282366920938463463374607431768211456_21000_96",
      # "ecmul_1-3_340282366920938463463374607431768211456_28000_128",
      # "ecmul_1-3_340282366920938463463374607431768211456_28000_80",
      # "ecmul_1-3_340282366920938463463374607431768211456_28000_96",
      # "ecmul_1-3_5616_21000_128",
      # "ecmul_1-3_5616_21000_96",
      # "ecmul_1-3_5616_28000_128",
      # "ecmul_1-3_5616_28000_96",
      # "ecmul_1-3_5617_21000_128",
      # "ecmul_1-3_5617_21000_96",
      # "ecmul_1-3_5617_28000_128",
      # "ecmul_1-3_5617_28000_96",
      # "ecmul_1-3_9935_21000_128",
      # "ecmul_1-3_9935_21000_96",
      # "ecmul_1-3_9935_28000_128",
      # "ecmul_1-3_9935_28000_96",
      # "ecmul_1-3_9_21000_128",
      # "ecmul_1-3_9_21000_96",
      # "ecmul_1-3_9_28000_128",
      # "ecmul_1-3_9_28000_96",
      # "ecmul_7827-6598_0_21000_128",
      # "ecmul_7827-6598_0_21000_64",
      # "ecmul_7827-6598_0_21000_80",
      # "ecmul_7827-6598_0_21000_96",
      # "ecmul_7827-6598_0_28000_128",
      # "ecmul_7827-6598_0_28000_64",
      # "ecmul_7827-6598_0_28000_80",
      # "ecmul_7827-6598_0_28000_96",
      # "ecmul_7827-6598_1456_21000_128",
      # "ecmul_7827-6598_1456_21000_80",
      # "ecmul_7827-6598_1456_21000_96",
      # "ecmul_7827-6598_1456_28000_128",
      # "ecmul_7827-6598_1456_28000_80",
      # "ecmul_7827-6598_1456_28000_96",
      # "ecmul_7827-6598_1_21000_128",
      # "ecmul_7827-6598_1_21000_96",
      # "ecmul_7827-6598_1_28000_128",
      # "ecmul_7827-6598_1_28000_96",
      # "ecmul_7827-6598_2_21000_128",
      # "ecmul_7827-6598_2_21000_96",
      # "ecmul_7827-6598_2_28000_128",
      # "ecmul_7827-6598_2_28000_96",
      # "ecmul_7827-6598_5616_21000_128",
      # "ecmul_7827-6598_5616_21000_96",
      # "ecmul_7827-6598_5616_28000_128",
      # "ecmul_7827-6598_5616_28000_96",
      # "ecmul_7827-6598_5617_21000_128",
      # "ecmul_7827-6598_5617_21000_96",
      # "ecmul_7827-6598_5617_28000_128",
      # "ecmul_7827-6598_5617_28000_96",
      # "ecmul_7827-6598_9935_21000_128",
      # "ecmul_7827-6598_9935_21000_96",
      # "ecmul_7827-6598_9935_28000_128",
      # "ecmul_7827-6598_9935_28000_96",
      # "ecmul_7827-6598_9_21000_128",
      # "ecmul_7827-6598_9_21000_96",
      # "ecmul_7827-6598_9_28000_128",
      # "ecmul_7827-6598_9_28000_96",
      # "ecpairing_bad_length_191",
      # "ecpairing_bad_length_193",
      # "ecpairing_empty_data",
      # "ecpairing_empty_data_insufficient_gas",
      # "ecpairing_one_point_fail",
      # "ecpairing_one_point_insufficient_gas",
      # "ecpairing_one_point_not_in_subgroup",
      # "ecpairing_one_point_with_g1_zero",
      # "ecpairing_one_point_with_g2_zero",
      # "ecpairing_one_point_with_g2_zero_and_g1_invalid",
      # "ecpairing_perturb_g2_by_curve_order",
      # "ecpairing_perturb_g2_by_field_modulus",
      # "ecpairing_perturb_g2_by_field_modulus_again",
      # "ecpairing_perturb_g2_by_one",
      # "ecpairing_perturb_zeropoint_by_curve_order",
      # "ecpairing_perturb_zeropoint_by_field_modulus",
      # "ecpairing_perturb_zeropoint_by_one",
      # "ecpairing_three_point_fail_1",
      # "ecpairing_three_point_match_1",
      # "ecpairing_two_point_fail_1",
      # "ecpairing_two_point_fail_2",
      # "ecpairing_two_point_match_1",
      # "ecpairing_two_point_match_2",
      # "ecpairing_two_point_match_3",
      # "ecpairing_two_point_match_4",
      # "ecpairing_two_point_match_5",
      # "ecpairing_two_point_oog",
      # "ecpairing_two_points_with_one_g2_zero",
      # "pairingTest",
      # "pointAdd",
      # "pointAddTrunc",
      # "pointMulAdd",
      # "pointMulAdd2",
    ],
    "ZeroKnowledge2" => [
      # "ecadd_0-0_0-0_21000_0",
      # "ecadd_0-0_0-0_21000_128",
      # "ecadd_0-0_0-0_21000_192",
      # "ecadd_0-0_0-0_21000_64",
      # "ecadd_0-0_0-0_21000_80",
      # "ecadd_0-0_0-0_25000_0",
      # "ecadd_0-0_0-0_25000_128",
      # "ecadd_0-0_0-0_25000_192",
      # "ecadd_0-0_0-0_25000_64",
      # "ecadd_0-0_0-0_25000_80",
      # "ecadd_0-0_1-2_21000_128",
      # "ecadd_0-0_1-2_21000_192",
      # "ecadd_0-0_1-2_25000_128",
      # "ecadd_0-0_1-2_25000_192",
      # "ecadd_0-0_1-3_21000_128",
      # "ecadd_0-0_1-3_25000_128",
      # "ecadd_0-3_1-2_21000_128",
      # "ecadd_0-3_1-2_25000_128",
      # "ecadd_1-2_0-0_21000_128",
      # "ecadd_1-2_0-0_21000_192",
      # "ecadd_1-2_0-0_21000_64",
      # "ecadd_1-2_0-0_25000_128",
      # "ecadd_1-2_0-0_25000_192",
      # "ecadd_1-2_0-0_25000_64",
      # "ecadd_1-2_1-2_21000_128",
      # "ecadd_1-2_1-2_21000_192",
      # "ecadd_1-2_1-2_25000_128",
      # "ecadd_1-2_1-2_25000_192",
      # "ecadd_1-3_0-0_21000_80",
      # "ecadd_1-3_0-0_25000_80",
      # "ecadd_1145-3932_1145-4651_21000_192",
      # "ecadd_1145-3932_1145-4651_25000_192",
      # "ecadd_1145-3932_2969-1336_21000_128",
      # "ecadd_1145-3932_2969-1336_25000_128",
      # "ecadd_6-9_19274124-124124_21000_128",
      # "ecadd_6-9_19274124-124124_25000_128",
      # "ecmul_0-0_0_21000_0",
      # "ecmul_0-0_0_21000_128",
      # "ecmul_0-0_0_21000_40",
      # "ecmul_0-0_0_21000_64",
      # "ecmul_0-0_0_21000_80",
      # "ecmul_0-0_0_21000_96",
      # "ecmul_0-0_0_28000_0",
      # "ecmul_0-0_0_28000_128",
      # "ecmul_0-0_0_28000_40",
      # "ecmul_0-0_0_28000_64",
      # "ecmul_0-0_0_28000_80",
      # "ecmul_0-0_0_28000_96",
      # "ecmul_0-0_1_21000_128",
      # "ecmul_0-0_1_21000_96",
      # "ecmul_0-0_1_28000_128",
      # "ecmul_0-0_1_28000_96",
      # "ecmul_0-0_2_21000_128",
      # "ecmul_0-0_2_21000_96",
      # "ecmul_0-0_2_28000_128",
      # "ecmul_0-0_2_28000_96",
      # "ecmul_0-0_340282366920938463463374607431768211456_21000_128",
      # "ecmul_0-0_340282366920938463463374607431768211456_21000_80",
      # "ecmul_0-0_340282366920938463463374607431768211456_21000_96",
      # "ecmul_0-0_340282366920938463463374607431768211456_28000_128",
      # "ecmul_0-0_340282366920938463463374607431768211456_28000_80",
      # "ecmul_0-0_340282366920938463463374607431768211456_28000_96",
      # "ecmul_0-0_5616_21000_128",
      # "ecmul_0-0_5616_21000_96",
      # "ecmul_0-0_5616_28000_128",
      # "ecmul_0-0_5616_28000_96",
      # "ecmul_0-0_5617_21000_128",
      # "ecmul_0-0_5617_21000_96",
      # "ecmul_0-0_5617_28000_128",
      # "ecmul_0-0_5617_28000_96",
      # "ecmul_0-0_9935_21000_128",
      # "ecmul_0-0_9935_21000_96",
      # "ecmul_0-0_9935_28000_128",
      # "ecmul_0-0_9935_28000_96",
      # "ecmul_0-0_9_21000_128",
      # "ecmul_0-0_9_21000_96",
      # "ecmul_0-0_9_28000_128",
      # "ecmul_0-0_9_28000_96",
      # "ecmul_0-3_0_21000_128",
      # "ecmul_0-3_0_21000_64",
      # "ecmul_0-3_0_21000_80",
      # "ecmul_0-3_0_21000_96",
      # "ecmul_0-3_0_28000_128",
      # "ecmul_0-3_0_28000_64",
      # "ecmul_0-3_0_28000_80",
      # "ecmul_0-3_0_28000_96",
      # "ecmul_0-3_1_21000_128",
      # "ecmul_0-3_1_21000_96",
      # "ecmul_0-3_1_28000_128",
      # "ecmul_0-3_1_28000_96",
      # "ecmul_0-3_2_21000_128",
      # "ecmul_0-3_2_21000_96",
      # "ecmul_0-3_2_28000_128",
      # "ecmul_0-3_2_28000_96",
      # "ecmul_0-3_340282366920938463463374607431768211456_21000_128",
      # "ecmul_0-3_340282366920938463463374607431768211456_21000_80",
      # "ecmul_0-3_340282366920938463463374607431768211456_21000_96",
      # "ecmul_0-3_340282366920938463463374607431768211456_28000_128",
      # "ecmul_0-3_340282366920938463463374607431768211456_28000_80",
      # "ecmul_0-3_340282366920938463463374607431768211456_28000_96",
      # "ecmul_0-3_5616_21000_128",
      # "ecmul_0-3_5616_21000_96",
      # "ecmul_0-3_5616_28000_128",
      # "ecmul_0-3_5616_28000_96",
      # "ecmul_0-3_5617_21000_128",
      # "ecmul_0-3_5617_21000_96",
      # "ecmul_0-3_5617_28000_128",
      # "ecmul_0-3_5617_28000_96",
      # "ecmul_0-3_9935_21000_128",
      # "ecmul_0-3_9935_21000_96",
      # "ecmul_0-3_9935_28000_128",
      # "ecmul_0-3_9935_28000_96",
      # "ecmul_0-3_9_21000_128",
      # "ecmul_0-3_9_21000_96",
      # "ecmul_0-3_9_28000_128",
      # "ecmul_0-3_9_28000_96",
      # "ecmul_1-2_0_21000_128",
      # "ecmul_1-2_0_21000_64",
      # "ecmul_1-2_0_21000_80",
      # "ecmul_1-2_0_21000_96",
      # "ecmul_1-2_0_28000_128",
      # "ecmul_1-2_0_28000_64",
      # "ecmul_1-2_0_28000_80",
      # "ecmul_1-2_0_28000_96",
      # "ecmul_1-2_1_21000_128",
      # "ecmul_1-2_1_21000_96",
      # "ecmul_1-2_1_28000_128",
      # "ecmul_1-2_1_28000_96",
      # "ecmul_1-2_2_21000_128",
      # "ecmul_1-2_2_21000_96",
    ]
  }

  test "Blockchain state tests" do
    for test_group_name <- Map.keys(@passing_tests_by_group) do
      for {test_name, test} <- passing_tests(test_group_name) do
        IO.puts "\n#{test_group_name}, #{test_name}\n"
        state = account_interface(test).state

        transaction =
          %Transaction{
            nonce: load_integer(test["transaction"]["nonce"]),
            gas_price: load_integer(test["transaction"]["gasPrice"]),
            gas_limit: load_integer(List.first(test["transaction"]["gasLimit"])),
            data: maybe_hex(List.first(test["transaction"]["data"])),
            to: maybe_hex(test["transaction"]["to"]),
            value: load_integer(List.first(test["transaction"]["value"]))
          }
          |> Transaction.Signature.sign_transaction(maybe_hex(test["transaction"]["secretKey"]))

        header = %Header{
          beneficiary: maybe_hex(test["env"]["currentCoinbase"]),
          number: load_integer(test["env"]["currentNumber"]),
          gas_limit: load_integer(test["env"]["currentGasLimit"])
        }

        {state, _, _} =
          Transaction.execute(state, transaction, header)

        expected_hash =
          test["post"]["Frontier"]
          |> List.first()
          |> Map.fetch!("hash")
          |> maybe_hex()

        assert state.root_hash == expected_hash
      end
    end
  end

  def dump_state(state) do
    state
    |> Trie.Inspector.all_values()
    |> Enum.map(fn {key, value} ->
      k = Base.encode16(key, case: :lower)
      v = value |> ExRLP.decode() |> Account.deserialize()
      {k, v}
    end)
    |> Enum.map(fn {address_key, account} ->
      IO.puts(address_key)
      IO.puts("  Balance: #{account.balance}")
      IO.puts("  Nonce: #{account.nonce}")
      IO.puts("  Storage Root:")
      IO.puts("  " <> Base.encode16(account.storage_root))
      IO.puts("  Code Hash")
      IO.puts("  " <> Base.encode16(account.code_hash))
    end)
  end

  def passing_tests(test_group_name) do
    tests =
      if Map.get(@passing_tests_by_group, test_group_name) == :all do
        all_tests_of_type(test_group_name)
      else
        Map.get(@passing_tests_by_group, test_group_name)
      end

    tests
    |> Enum.map(fn test_name ->
      {test_name, read_state_test_file(test_group_name, test_name)}
    end)
  end

  def all_tests_of_type(type) do
    {:ok, files} = File.ls(test_directory_name(type))

    Enum.map(files, fn file_name ->
      file_name
      |> String.replace_suffix(".json", "")
      |> String.to_atom()
    end)
  end

  def test_directory_name(group) do
    dir_name = "st#{group}"
    Path.join([@ethereum_common_tests_path, "GeneralStateTests", dir_name])
  end

  def read_state_test_file(type, test_name) do
    file_name = state_test_file_name(type, test_name)

    {:ok, body} = File.read(file_name)
    Poison.decode!(body)[test_name]
  end

  def state_test_file_name(group, test) do
    file_name = Path.join(~w(st#{group} #{test}.json))
    relative_path = Path.join(~w(.. .. ethereum_common_tests GeneralStateTests #{file_name}))

    System.cwd()
    |> Path.join(relative_path)
    |> Path.expand()
  end

  def account_interface(test) do
    db = MerklePatriciaTree.Test.random_ets_db()

    state = %Trie{
      db: db,
      root_hash: maybe_hex(test["env"]["previousHash"])
    }

    state =
      Enum.reduce(test["pre"], state, fn {address, account}, state ->
        storage = %Trie{
          root_hash: Trie.empty_trie_root_hash(),
          db: db
        }

        storage =
          Enum.reduce(account["storage"], storage, fn {key, value}, trie ->
            Trie.update(trie, maybe_hex(key), maybe_hex(value))
          end)

        new_account = %Account{
          nonce: load_integer(account["nonce"]),
          balance: load_integer(account["balance"]),
          storage_root: storage.root_hash
        }

        state
        |> Account.put_account(maybe_hex(address), new_account)
        |> Account.put_code(maybe_hex(address), maybe_hex(account["code"]))
      end)

    AccountInterface.new(state)
  end
end
