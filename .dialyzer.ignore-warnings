# protocol warnings

:0: Unknown function 'Elixir.EVM.Interface.AccountInterface.Atom':'__impl__'/1
:0: Unknown function 'Elixir.EVM.Interface.AccountInterface.BitString':'__impl__'/1
:0: Unknown function 'Elixir.EVM.Interface.AccountInterface.Float':'__impl__'/1
:0: Unknown function 'Elixir.EVM.Interface.AccountInterface.Function':'__impl__'/1
:0: Unknown function 'Elixir.EVM.Interface.AccountInterface.Integer':'__impl__'/1
:0: Unknown function 'Elixir.EVM.Interface.AccountInterface.List':'__impl__'/1
:0: Unknown function 'Elixir.EVM.Interface.AccountInterface.Map':'__impl__'/1
:0: Unknown function 'Elixir.EVM.Interface.AccountInterface.PID':'__impl__'/1
:0: Unknown function 'Elixir.EVM.Interface.AccountInterface.Port':'__impl__'/1
:0: Unknown function 'Elixir.EVM.Interface.AccountInterface.Reference':'__impl__'/1
:0: Unknown function 'Elixir.EVM.Interface.AccountInterface.Tuple':'__impl__'/1
:0: Unknown function 'Elixir.EVM.Interface.BlockInterface.Atom':'__impl__'/1
:0: Unknown function 'Elixir.EVM.Interface.BlockInterface.BitString':'__impl__'/1
:0: Unknown function 'Elixir.EVM.Interface.BlockInterface.Float':'__impl__'/1
:0: Unknown function 'Elixir.EVM.Interface.BlockInterface.Function':'__impl__'/1
:0: Unknown function 'Elixir.EVM.Interface.BlockInterface.Integer':'__impl__'/1
:0: Unknown function 'Elixir.EVM.Interface.BlockInterface.List':'__impl__'/1
:0: Unknown function 'Elixir.EVM.Interface.BlockInterface.Map':'__impl__'/1
:0: Unknown function 'Elixir.EVM.Interface.BlockInterface.PID':'__impl__'/1
:0: Unknown function 'Elixir.EVM.Interface.BlockInterface.Port':'__impl__'/1
:0: Unknown function 'Elixir.EVM.Interface.BlockInterface.Reference':'__impl__'/1
:0: Unknown function 'Elixir.EVM.Interface.BlockInterface.Tuple':'__impl__'/1
:0: Unknown type 'Elixir.Chain':t/0
:0: Unknown type 'Elixir.Cipher':init_vector/0
:0: Unknown type 'Elixir.Crpyto':signature/0
:0: Unknown type 'Elixir.Cryto':hash/0
:0: Unknown type 'Elixir.DB':db/0
:0: Unknown type 'Elixir.EVM':state/0
:0: Unknown type 'Elixir.EVM.EVM':trie_root/0
:0: Unknown type 'Elixir.Endpoint':t/0
:0: Unknown type 'Elixir.ExCrpyto':hash_type/0
:0: Unknown type 'Elixir.ExWire.Config':private_key/0
:0: Unknown type 'Elixir.ExWire.Config':pubic_key/0
:0: Unknown type 'Elixir.ExWire.Crypto':private_key/0
:0: Unknown type 'Elixir.ExWire.Endpoint':t/0
:0: Unknown type 'Elixir.ExthCrypto':cipher/0
:0: Unknown type 'Elixir.ExthCrypto':hash/0
:0: Unknown type 'Elixir.ExthCrypto':hash_type/0
:0: Unknown type 'Elixir.ExthCrypto':named_curve/0
:0: Unknown type 'Elixir.ExthCrypto':signature/0
:0: Unknown type 'Elixir.ExthCrypto':symmetric_key/0
:0: Unknown type 'Elixir.ExthCrypto.Cipher':plaintrxt/0
:0: Unknown type 'Elixir.ExthCrypto.Key':keypair/0
:0: Unknown type 'Elixir.Header':t/0
:0: Unknown type 'Elixir.RLP':t/0
:0: Unknown type 'Elixir.Sring':t/0
:0: Unknown type crypto:ctr_state/0
:0: Unknown type crypto:hash_algorithms/0

# TODO: rewrite mocked protocol typespecs

lib/evm/interface/mock/mock_account_interface.ex:41: The return type atom() in the specification of add_wei/3 is not a subtype of 'nil' | integer(), which is the expected return type for the callback of the 'Elixir.EVM.Interface.AccountInterface' behaviour
lib/evm/interface/mock/mock_account_interface.ex:41: Invalid type specification for function 'Elixir.EVM.Interface.AccountInterface.EVM.Interface.Mock.MockAccountInterface':add_wei/3. The success typing is (#{'account_map':=map(), _=>_},_,number()) -> #{'account_map':=map(), _=>_}
lib/evm/interface/mock/mock_account_interface.ex:43: The inferred type for the 1st argument of add_wei/3 (#{'account_map':=map(), _=>_}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.EVM.Interface.AccountInterface' behaviour
lib/evm/interface/mock/mock_account_interface.ex:43: The inferred return type of add_wei/3 (#{'account_map':=map(), _=>_}) has nothing in common with 'nil' | integer(), which is the expected return type for the callback of the 'Elixir.EVM.Interface.AccountInterface' behaviour
lib/evm/interface/mock/mock_account_interface.ex:49: The return type atom() in the specification of transfer/4 is not a subtype of 'nil' | integer(), which is the expected return type for the callback of the 'Elixir.EVM.Interface.AccountInterface' behaviour
lib/evm/interface/mock/mock_account_interface.ex:49: Invalid type specification for function 'Elixir.EVM.Interface.AccountInterface.EVM.Interface.Mock.MockAccountInterface':transfer/4. The success typing is (#{'account_map':=map(), _=>_},_,_,number()) -> #{'account_map':=map(), _=>_}
lib/evm/interface/mock/mock_account_interface.ex:51: The inferred type for the 1st argument of transfer/4 (#{'account_map':=map(), _=>_}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.EVM.Interface.AccountInterface' behaviour
lib/evm/interface/mock/mock_account_interface.ex:51: The inferred return type of transfer/4 (#{'account_map':=map(), _=>_}) has nothing in common with 'nil' | integer(), which is the expected return type for the callback of the 'Elixir.EVM.Interface.AccountInterface' behaviour
lib/evm/interface/mock/mock_account_interface.ex:72: The return type {atom(),integer()} in the specification of increment_account_nonce/2 is not a subtype of atom(), which is the expected return type for the callback of the 'Elixir.EVM.Interface.AccountInterface' behaviour
lib/evm/interface/mock/mock_account_interface.ex:74: The inferred return type of increment_account_nonce/2 ({atom() | #{'account_map':=map(), _=>_},number()}) has nothing in common with atom(), which is the expected return type for the callback of the 'Elixir.EVM.Interface.AccountInterface' behaviour
lib/evm/interface/mock/mock_account_interface.ex:97: Invalid type specification for function 'Elixir.EVM.Interface.AccountInterface.EVM.Interface.Mock.MockAccountInterface':put_storage/4. The success typing is (#{'account_map':=map(), _=>_},_,_,_) -> #{'account_map':=map(), _=>_}
lib/evm/interface/mock/mock_account_interface.ex:99: The inferred type for the 1st argument of put_storage/4 (#{'account_map':=map(), _=>_}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.EVM.Interface.AccountInterface' behaviour
lib/evm/interface/mock/mock_account_interface.ex:99: The inferred return type of put_storage/4 (#{'account_map':=map(), _=>_}) has nothing in common with atom(), which is the expected return type for the callback of the 'Elixir.EVM.Interface.AccountInterface' behaviour
lib/evm/interface/mock/mock_account_interface.ex:136: Invalid type specification for function 'Elixir.EVM.Interface.AccountInterface.EVM.Interface.Mock.MockAccountInterface':suicide_account/2. The success typing is (#{'account_map':=map(), _=>_},_) -> #{'account_map':=map(), _=>_}
lib/evm/interface/mock/mock_account_interface.ex:138: The inferred type for the 1st argument of suicide_account/2 (#{'account_map':=map(), _=>_}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.EVM.Interface.AccountInterface' behaviour
lib/evm/interface/mock/mock_account_interface.ex:138: The inferred return type of suicide_account/2 (#{'account_map':=map(), _=>_}) has nothing in common with atom(), which is the expected return type for the callback of the 'Elixir.EVM.Interface.AccountInterface' behaviour
lib/evm/interface/mock/mock_account_interface.ex:199: The return type {integer(),atom(),#{'__struct__':='Elixir.EVM.SubState', 'logs':=binary(), 'refund':=integer(), 'suicide_list':=[<<_:160>>]}} in the specification of create_contract/9 is not a subtype of {atom(),integer(),#{'__struct__':='Elixir.EVM.SubState', 'logs':=binary(), 'refund':=integer(), 'suicide_list':=[<<_:160>>]}}, which is the expected return type for the callback of the 'Elixir.EVM.Interface.AccountInterface' behaviour
lib/evm/interface/mock/mock_account_interface.ex:199: Invalid type specification for function 'Elixir.EVM.Interface.AccountInterface.EVM.Interface.Mock.MockAccountInterface':create_contract/9. The success typing is (atom() | #{'contract_result':='nil' | [{atom(),_}] | map(), _=>_},_,_,_,_,_,_,_,_) -> {atom() | #{'contract_result':='nil' | [{_,_}] | map(), _=>_},_,_}
lib/evm/interface/mock/mock_block_interface.ex:10: Invalid type specification for function 'Elixir.EVM.Interface.Mock.MockBlockInterface':new/2. The success typing is (_,_) -> #{'__struct__':='Elixir.EVM.Interface.Mock.MockBlockInterface', 'block_header':=_, 'block_map':=_}
lib/evm/interface/mock/mock_account_interface.ex:199: The return type {integer(),atom(),#{'__struct__':='Elixir.EVM.SubState', 'logs':=[#{'__struct__':='Elixir.EVM.LogEntry', 'address':=<<_:160>>, 'data':=binary(), 'topics':=[binary()]}], 'refund':=integer(), 'suicide_list':=[<<_:160>>]}} in the specification of create_contract/9 is not a subtype of {atom(),integer(),#{'__struct__':='Elixir.EVM.SubState', 'logs':=[#{'__struct__':='Elixir.EVM.LogEntry', 'address':=<<_:160>>, 'data':=binary(), 'topics':=[binary()]}], 'refund':=integer(), 'suicide_list':=[<<_:160>>]}}, which is the expected return type for the callback of the 'Elixir.EVM.Interface.AccountInterface' behaviour

lib/evm/machine_code.ex:113: The variable _@1 can never match since previous clauses completely covered the type bitstring()
lib/evm/machine_code.ex:113: Cons will produce an improper list since its 2nd argument is binary(


# Introduced by Elixir 1.6.4 https://github.com/elixir-lang/elixir/issues/7508
lib/trie/helper.ex:41: Guard test is_binary(_@1::<<_:4>>) can never succeed
lib/trie/helper.ex:41: The variable _@1 can never match since previous clauses completely covered the type <<_:4>>

#Blockchain app

apps/blockchain/lib/blockchain/account.ex:481: The pattern 'nil' can never match the type 'not_found' | {'ok',binary()}
apps/blockchain/lib/blockchain/account.ex:499: Invalid type specification for function 'Elixir.Blockchain.Account':put_storage/4. The success typing is (#{'__struct__':='Elixir.MerklePatriciaTree.Trie', 'db':={atom(),_}, 'root_hash':=binary()},<<_:160>>,_,_) -> {#{'__struct__':='Elixir.MerklePatriciaTree.Trie', 'db':={_,_}, 'root_hash':=binary()},'nil' | #{'__struct__':='Elixir.Blockchain.Account', 'balance':=non_neg_integer(), 'code_hash':=binary() | [any()], 'nonce':=non_neg_integer(), 'storage_root':=binary()},#{'__struct__':='Elixir.Blockchain.Account', 'balance':=integer(), 'code_hash':=binary() | [any()], 'nonce':=integer(), 'storage_root':=binary()}} | #{'__struct__':='Elixir.MerklePatriciaTree.Trie', 'db':={atom(),_}, 'root_hash':=binary()}
apps/blockchain/lib/blockchain/account.ex:540: Invalid type specification for function 'Elixir.Blockchain.Account':storage_put/4. The success typing is ({atom(),_},binary(),non_neg_integer(),_) -> #{'__struct__':='Elixir.MerklePatriciaTree.Trie', 'db':={atom(),_}, 'root_hash':=binary()}
apps/blockchain/lib/blockchain/application.ex:16: The call 'Elixir.EVM.Debugger':break_on([{'address',binary()},...]) will never return since the success typing is (['address']) -> integer() and the contract is (elixir:keyword('Elixir.EVM.Debugger.Breakpoint':conditions())) -> 'Elixir.EVM.Debugger.Breakpoint':id()
apps/blockchain/lib/blockchain/block.ex:258: Overloaded contract for 'Elixir.Blockchain.Block':get_block_hash_by_steps/3 has overlapping domains; such contracts are currently unsupported and are simply ignored
apps/blockchain/lib/blockchain/block.ex:558: Function gen_child_block/2 has no local return
apps/blockchain/lib/blockchain/block.ex:558: Function gen_child_block/3 has no local return
apps/blockchain/lib/blockchain/block.ex:566: The call 'Elixir.Blockchain.Block':identity(#{'__struct__':='Elixir.Blockchain.Block', 'block_hash':='nil', 'header':=#{'__struct__':='Elixir.Block.Header', 'beneficiary':=_, 'difficulty':='nil', 'extra_data':=_, 'gas_limit':=0, 'gas_used':=0, 'logs_bloom':=<<_:2048>>, 'mix_hash':='nil', 'nonce':='nil', 'number':='nil', 'ommers_hash':=<<_:256>>, 'parent_hash':='nil', 'receipts_root':=<<_:256>>, 'state_root':=_, 'timestamp':=_, 'transactions_root':=<<_:256>>}, 'ommers':=[], 'transactions':=[]}) breaks the contract (t()) -> t()
apps/blockchain/lib/blockchain/block.ex:875: Function put_state/2 will never be called
apps/blockchain/lib/blockchain/block.ex:881: Function put_gas_used/2 will never be called
apps/blockchain/lib/blockchain/block.ex:979: The test <<_:160>> == 'nil' can never evaluate to 'true'
apps/blockchain/lib/blockchain/chain.ex:88: Invalid type specification for function 'Elixir.Blockchain.Chain':load_chain/1. The success typing is (atom()) -> #{'__struct__':='Elixir.Blockchain.Chain', 'accounts':=map(), 'engine':=map(), 'genesis':=#{'author':=binary(), 'difficulty':=non_neg_integer(), 'extra_data':=binary(), 'gas_limit':=non_neg_integer(), 'parent_hash':=binary(), 'timestamp':=non_neg_integer()}, 'name':=_, 'nodes':=_, 'params':=#{'account_start_nonce':=non_neg_integer(), 'block_reward':=non_neg_integer(), 'eip155_transition':=_, 'eip86_transition':=non_neg_integer(), 'eip98_transition':=non_neg_integer(), 'gas_limit_bound_divisor':=non_neg_integer(), 'maximum_extra_data_size':=non_neg_integer(), 'min_gas_limit':=non_neg_integer()}}
apps/blockchain/lib/blockchain/contract.ex:40: Function create_contract/9 has no local return
apps/blockchain/lib/blockchain/contract.ex:58: The call 'Elixir.EVM.VM':run(Vavailable_gas@1::any(),Vexec_env@1::#{'__struct__':='Elixir.EVM.ExecEnv', 'account_interface':=#{'__struct__':='Elixir.Blockchain.Interface.AccountInterface', 'state':=_}, 'address':=_, 'block_interface':=#{'__struct__':='Elixir.Blockchain.Interface.BlockInterface', 'block_header':=_, 'db':=_}, 'data':=<<>>, 'gas_price':=_, 'machine_code':=_, 'originator':=_, 'sender':=_, 'stack_depth':=_, 'value_in_wei':=_}) will never return since the success typing is (integer(),#{'__struct__':='Elixir.EVM.ExecEnv', 'account_interface':=atom(), 'address':=<<_:160>>, 'block_interface':=atom(), 'data':=binary(), 'gas_price':=integer(), 'machine_code':=binary(), 'originator':=<<_:160>>, 'sender':=<<_:160>>, 'stack_depth':=integer(), 'value_in_wei':=integer()}) -> {integer(),#{'__struct__':='Elixir.EVM.SubState', 'logs':=[map()], 'refund':=integer(), 'suicide_list':=[<<_:160>>]},#{'__struct__':='Elixir.EVM.ExecEnv', 'account_interface':=atom(), 'address':=<<_:160>>, 'block_interface':=atom(), 'data':=binary(), 'gas_price':=integer(), 'machine_code':=binary(), 'originator':=<<_:160>>, 'sender':=<<_:160>>, 'stack_depth':=integer(), 'value_in_wei':=integer()},binary()} and the contract is ('Elixir.EVM.Gas':t(),'Elixir.EVM.ExecEnv':t()) -> {'Elixir.EVM.Gas':t(),'Elixir.EVM.SubState':t(),'Elixir.EVM.ExecEnv':t(),output()}
apps/blockchain/lib/blockchain/contract.ex:109: Function message_call/12 has no local return
apps/blockchain/lib/blockchain/contract.ex:129: Fun application with arguments (Vavailable_gas@1::any(),Vexec_env@1::#{'__struct__':='Elixir.EVM.ExecEnv', 'account_interface':=#{'__struct__':='Elixir.Blockchain.Interface.AccountInterface', 'state':=_}, 'address':=_, 'block_interface':=#{'__struct__':='Elixir.Blockchain.Interface.BlockInterface', 'block_header':=_, 'db':=_}, 'data':=_, 'gas_price':=_, 'machine_code':=_, 'originator':=_, 'sender':=_, 'stack_depth':=_, 'value_in_wei':=_}) will fail since the function has type fun((integer(),#{'__struct__':='Elixir.EVM.ExecEnv', 'account_interface':=atom(), 'address':=<<_:160>>, 'block_interface':=atom(), 'data':=binary(), 'gas_price':=integer(), 'machine_code':=binary(), 'originator':=<<_:160>>, 'sender':=<<_:160>>, 'stack_depth':=integer(), 'value_in_wei':=integer()}) -> {_,integer(),#{'__struct__':='Elixir.EVM.SubState', 'logs':=[#{'__struct__':='Elixir.EVM.LogEntry', 'address':=<<_:160>>, 'data':=binary(), 'topics':=[binary()]}], 'refund':=integer(), 'suicide_list':=[<<_:160>>]},binary()})
apps/blockchain/lib/blockchain/contract.ex:220: Invalid type specification for function 'Elixir.Blockchain.Contract':create_contract_exec_env/9. The success typing is (_,_,_,_,_,_,_,_,atom() | #{'db':=_, _=>_}) -> #{'__struct__':='Elixir.EVM.ExecEnv', 'account_interface':=#{'__struct__':='Elixir.Blockchain.Interface.AccountInterface', 'state':=_}, 'address':=_, 'block_interface':=#{'__struct__':='Elixir.Blockchain.Interface.BlockInterface', 'block_header':=_, 'db':=_}, 'data':=<<>>, 'gas_price':=_, 'machine_code':=_, 'originator':=_, 'sender':=_, 'stack_depth':=_, 'value_in_wei':=_}
apps/blockchain/lib/blockchain/contract.ex:260: Invalid type specification for function 'Elixir.Blockchain.Contract':create_message_call_exec_env/10. The success typing is (_,_,_,_,_,_,_,_,_,atom() | #{'db':=_, _=>_}) -> #{'__struct__':='Elixir.EVM.ExecEnv', 'account_interface':=#{'__struct__':='Elixir.Blockchain.Interface.AccountInterface', 'state':=_}, 'address':=_, 'block_interface':=#{'__struct__':='Elixir.Blockchain.Interface.BlockInterface', 'block_header':=_, 'db':=_}, 'data':=_, 'gas_price':=_, 'machine_code':=_, 'originator':=_, 'sender':=_, 'stack_depth':=_, 'value_in_wei':=_}
apps/blockchain/lib/blockchain/contract.ex:325: Function interpret_vm_result/1 will never be called
apps/blockchain/lib/blockchain/interface/account_interface.ex:36: Undefined callback function get_account_nonce/2 (behaviour 'Elixir.EVM.Interface.AccountInterface')
apps/blockchain/lib/blockchain/interface/account_interface.ex:67: The return type atom() in the specification of add_wei/3 is not a subtype of 'nil' | integer(), which is the expected return type for the callback of the 'Elixir.EVM.Interface.AccountInterface' behaviour
apps/blockchain/lib/blockchain/interface/account_interface.ex:67: Invalid type specification for function 'Elixir.EVM.Interface.AccountInterface.Blockchain.Interface.AccountInterface':add_wei/3. The success typing is (#{'state':=#{'__struct__':='Elixir.MerklePatriciaTree.Trie', 'db':={atom(),_}, 'root_hash':=binary()}, _=>_},<<_:160>>,integer()) -> #{'state':={#{'__struct__':='Elixir.MerklePatriciaTree.Trie', 'db':={_,_}, 'root_hash':=binary()},'nil' | #{'__struct__':='Elixir.Blockchain.Account', 'balance':=non_neg_integer(), 'code_hash':=binary() | [any()], 'nonce':=non_neg_integer(), 'storage_root':=binary()},#{'__struct__':='Elixir.Blockchain.Account', 'balance':=integer(), 'code_hash':=binary() | [any()], 'nonce':=integer(), 'storage_root':=binary()}} | #{'__struct__':='Elixir.MerklePatriciaTree.Trie', 'db':={atom(),_}, 'root_hash':=binary()}, _=>_}
apps/blockchain/lib/blockchain/interface/account_interface.ex:68: The inferred type for the 1st argument of add_wei/3 (#{'state':=#{'__struct__':='Elixir.MerklePatriciaTree.Trie', 'db':={atom(),_}, 'root_hash':=binary()}, _=>_}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.EVM.Interface.AccountInterface' behaviour
apps/blockchain/lib/blockchain/interface/account_interface.ex:68: The inferred return type of add_wei/3 (#{'state':={#{'__struct__':='Elixir.MerklePatriciaTree.Trie', 'db':={_,_}, 'root_hash':=binary()},'nil' | #{'__struct__':='Elixir.Blockchain.Account', 'balance':=non_neg_integer(), 'code_hash':=binary() | [any()], 'nonce':=non_neg_integer(), 'storage_root':=binary()},#{'__struct__':='Elixir.Blockchain.Account', 'balance':=integer(), 'code_hash':=binary() | [any()], 'nonce':=integer(), 'storage_root':=binary()}} | #{'__struct__':='Elixir.MerklePatriciaTree.Trie', 'db':={atom(),_}, 'root_hash':=binary()}, _=>_}) has nothing in common with 'nil' | integer(), which is the expected return type for the callback of the 'Elixir.EVM.Interface.AccountInterface' behaviour
apps/blockchain/lib/blockchain/interface/account_interface.ex:74: The return type atom() in the specification of transfer/4 is not a subtype of 'nil' | integer(), which is the expected return type for the callback of the 'Elixir.EVM.Interface.AccountInterface' behaviour
apps/blockchain/lib/blockchain/interface/account_interface.ex:74: Invalid type specification for function 'Elixir.EVM.Interface.AccountInterface.Blockchain.Interface.AccountInterface':transfer/4. The success typing is (#{'state':=#{'__struct__':='Elixir.MerklePatriciaTree.Trie', 'db':={atom(),_}, 'root_hash':=binary()}, _=>_},<<_:160>>,<<_:160>>,integer()) -> #{'state':={#{'__struct__':='Elixir.MerklePatriciaTree.Trie', 'db':={_,_}, 'root_hash':=binary()},'nil' | #{'__struct__':='Elixir.Blockchain.Account', 'balance':=non_neg_integer(), 'code_hash':=binary() | [any()], 'nonce':=non_neg_integer(), 'storage_root':=binary()},#{'__struct__':='Elixir.Blockchain.Account', 'balance':=integer(), 'code_hash':=binary() | [any()], 'nonce':=integer(), 'storage_root':=binary()}} | #{'__struct__':='Elixir.MerklePatriciaTree.Trie', 'db':={atom(),_}, 'root_hash':=binary()}, _=>_}
apps/blockchain/lib/blockchain/interface/account_interface.ex:75: The inferred type for the 1st argument of transfer/4 (#{'state':=#{'__struct__':='Elixir.MerklePatriciaTree.Trie', 'db':={atom(),_}, 'root_hash':=binary()}, _=>_}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.EVM.Interface.AccountInterface' behaviour
apps/blockchain/lib/blockchain/interface/account_interface.ex:75: The inferred return type of transfer/4 (#{'state':={#{'__struct__':='Elixir.MerklePatriciaTree.Trie', 'db':={_,_}, 'root_hash':=binary()},'nil' | #{'__struct__':='Elixir.Blockchain.Account', 'balance':=non_neg_integer(), 'code_hash':=binary() | [any()], 'nonce':=non_neg_integer(), 'storage_root':=binary()},#{'__struct__':='Elixir.Blockchain.Account', 'balance':=integer(), 'code_hash':=binary() | [any()], 'nonce':=integer(), 'storage_root':=binary()}} | #{'__struct__':='Elixir.MerklePatriciaTree.Trie', 'db':={atom(),_}, 'root_hash':=binary()}, _=>_}) has nothing in common with 'nil' | integer(), which is the expected return type for the callback of the 'Elixir.EVM.Interface.AccountInterface' behaviour
apps/blockchain/lib/blockchain/interface/account_interface.ex:109: The pattern 'not_found' can never match the type {'ok',binary()}
apps/blockchain/lib/blockchain/interface/account_interface.ex:130: The return type {atom(),integer()} in the specification of increment_account_nonce/2 is not a subtype of atom(), which is the expected return type for the callback of the 'Elixir.EVM.Interface.AccountInterface' behaviour
apps/blockchain/lib/blockchain/interface/account_interface.ex:130: Invalid type specification for function 'Elixir.EVM.Interface.AccountInterface.Blockchain.Interface.AccountInterface':increment_account_nonce/2. The success typing is (#{'state':=#{'__struct__':='Elixir.MerklePatriciaTree.Trie', 'db':={atom(),_}, 'root_hash':=binary()}, _=>_},<<_:160>>) -> {#{'state':=#{'__struct__':='Elixir.MerklePatriciaTree.Trie', 'db':={_,_}, 'root_hash':=binary()}, _=>_},_}
apps/blockchain/lib/blockchain/interface/account_interface.ex:131: The inferred type for the 1st argument of increment_account_nonce/2 (#{'state':=#{'__struct__':='Elixir.MerklePatriciaTree.Trie', 'db':={atom(),_}, 'root_hash':=binary()}, _=>_}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.EVM.Interface.AccountInterface' behaviour
apps/blockchain/lib/blockchain/interface/account_interface.ex:131: The inferred return type of increment_account_nonce/2 ({#{'state':=#{'__struct__':='Elixir.MerklePatriciaTree.Trie', 'db':={_,_}, 'root_hash':=binary()}, _=>_},_}) has nothing in common with atom(), which is the expected return type for the callback of the 'Elixir.EVM.Interface.AccountInterface' behaviour
apps/blockchain/lib/blockchain/interface/account_interface.ex:201: Invalid type specification for function 'Elixir.EVM.Interface.AccountInterface.Blockchain.Interface.AccountInterface':put_storage/4. The success typing is (#{'state':=#{'__struct__':='Elixir.MerklePatriciaTree.Trie', 'db':={atom(),_}, 'root_hash':=binary()}, _=>_},<<_:160>>,_,_) -> #{'state':={#{'__struct__':='Elixir.MerklePatriciaTree.Trie', 'db':={_,_}, 'root_hash':=binary()},'nil' | #{'__struct__':='Elixir.Blockchain.Account', 'balance':=non_neg_integer(), 'code_hash':=binary() | [any()], 'nonce':=non_neg_integer(), 'storage_root':=binary()},#{'__struct__':='Elixir.Blockchain.Account', 'balance':=integer(), 'code_hash':=binary() | [any()], 'nonce':=integer(), 'storage_root':=binary()}} | #{'__struct__':='Elixir.MerklePatriciaTree.Trie', 'db':={atom(),_}, 'root_hash':=binary()}, _=>_}
apps/blockchain/lib/blockchain/interface/account_interface.ex:202: The inferred type for the 1st argument of put_storage/4 (#{'state':=#{'__struct__':='Elixir.MerklePatriciaTree.Trie', 'db':={atom(),_}, 'root_hash':=binary()}, _=>_}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.EVM.Interface.AccountInterface' behaviour
apps/blockchain/lib/blockchain/interface/account_interface.ex:202: The inferred return type of put_storage/4 (#{'state':={#{'__struct__':='Elixir.MerklePatriciaTree.Trie', 'db':={_,_}, 'root_hash':=binary()},'nil' | #{'__struct__':='Elixir.Blockchain.Account', 'balance':=non_neg_integer(), 'code_hash':=binary() | [any()], 'nonce':=non_neg_integer(), 'storage_root':=binary()},#{'__struct__':='Elixir.Blockchain.Account', 'balance':=integer(), 'code_hash':=binary() | [any()], 'nonce':=integer(), 'storage_root':=binary()}} | #{'__struct__':='Elixir.MerklePatriciaTree.Trie', 'db':={atom(),_}, 'root_hash':=binary()}, _=>_}) has nothing in common with atom(), which is the expected return type for the callback of the 'Elixir.EVM.Interface.AccountInterface' behaviour
apps/blockchain/lib/blockchain/interface/account_interface.ex:230: Invalid type specification for function 'Elixir.EVM.Interface.AccountInterface.Blockchain.Interface.AccountInterface':suicide_account/2. The success typing is (#{'state':=#{'__struct__':='Elixir.MerklePatriciaTree.Trie', 'db':={atom(),_}, 'root_hash':=binary()}, _=>_},<<_:160>>) -> #{'state':=#{'__struct__':='Elixir.MerklePatriciaTree.Trie', 'db':={atom(),_}, 'root_hash':=binary()}, _=>_}
apps/blockchain/lib/blockchain/interface/account_interface.ex:231: The inferred type for the 1st argument of suicide_account/2 (#{'state':=#{'__struct__':='Elixir.MerklePatriciaTree.Trie', 'db':={atom(),_}, 'root_hash':=binary()}, _=>_}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.EVM.Interface.AccountInterface' behaviour
apps/blockchain/lib/blockchain/interface/account_interface.ex:231: The inferred return type of suicide_account/2 (#{'state':=#{'__struct__':='Elixir.MerklePatriciaTree.Trie', 'db':={atom(),_}, 'root_hash':=binary()}, _=>_}) has nothing in common with atom(), which is the expected return type for the callback of the 'Elixir.EVM.Interface.AccountInterface' behaviour
apps/blockchain/lib/blockchain/interface/account_interface.ex:272: Function message_call/12 has no local return
apps/blockchain/lib/blockchain/interface/account_interface.ex:292: Function create_contract/9 has no local return
apps/blockchain/lib/blockchain/transaction.ex:291: Function execute_transaction/3 has no local return
apps/blockchain/lib/eth_common_test/helpers.ex:15: Overloaded contract for 'Elixir.EthCommonTest.Helpers':maybe_hex/1 has overlapping domains; such contracts are currently unsupported and are simply ignored
apps/blockchain/lib/eth_common_test/helpers.ex:79: Function load_src/2 has no local return
apps/blockchain/lib/eth_common_test/helpers.ex:80: The call 'Elixir.EthCommonTest.Helpers':test_file_name(<<_:8,_:_*1>>,Vfiller@1::any()) breaks the contract (atom(),atom()) -> 'Elixir.String':t()

#ExWire app

apps/ex_wire/lib/ex_wire.ex:21: Guard test _@1::'true' =:= 'false' can never succeed
apps/ex_wire/lib/ex_wire/adapter/tcp.ex:36: Function init/1 has no local return
apps/ex_wire/lib/ex_wire/adapter/tcp.ex:52: The call 'Elixir.ExWire.Handshake.Struct.AuthMsgV4':serialize(Vmy_auth_msg@1::#{'__struct__':='Elixir.ExWire.Handshake.Struct.AuthMsgV4', 'remote_ephemeral_public_key':='nil', 'remote_nonce':=binary(), 'remote_public_key':=_, 'remote_version':=63, 'signature':=binary()}) breaks the contract (t()) -> 'Elixir.ExRLP':t()
apps/ex_wire/lib/ex_wire/adapter/tcp.ex:109: The pattern {'ok', Vsecrets@1, Vframe_rest@1} can never match the type {'invalid',<<_:64,_:_*8>>}
apps/ex_wire/lib/ex_wire/adapter/tcp.ex:156: The pattern {'ok', Vack_data@1, Vsecrets@1} can never match the type {'invalid',<<_:64,_:_*8>>}
apps/ex_wire/lib/ex_wire/adapter/tcp.ex:186: The pattern {'ok', Vpacket_type@1, Vpacket_data@1, Vframe_rest@1, Vupdated_secrets@1} can never match the type {'error',<<_:128,_:_*144>>}
apps/ex_wire/lib/ex_wire/adapter/tcp.ex:248: The created fun has no local return
apps/ex_wire/lib/ex_wire/config.ex:71: Invalid type specification for function 'Elixir.ExWire.Config':chain/0. The success typing is () -> #{'__struct__':='Elixir.Blockchain.Chain', 'accounts':=#{<<_:160>>=>#{'balance':=0 | 1 | 1000000000000000000000000000000, 'nonce':=0}}, 'engine':=#{<<_:48>>=>#{'difficulty_bound_divisor':=2048, 'duration_limit':=13, 'eip150_transition':=0, 'eip160_transition':=10, 'eip161abc_transition':=10, 'eip161d_transition':=10, 'homestead_transition':=0, 'max_code_size':=24576, 'minimum_difficulty':=131072}}, 'genesis':=#{'author':=<<_:160>>, 'difficulty':=1048576, 'extra_data':=<<_:256>>, 'gas_limit':=16777216, 'parent_hash':=<<_:256>>, 'timestamp':=0}, 'name':=<<_:56>>, 'nodes':=[<<_:64,_:_*8>>,...], 'params':=#{'account_start_nonce':=0, 'block_reward':=5000000000000000000, 'eip155_transition':=10, 'eip86_transition':=36028797018963967, 'eip98_transition':=36028797018963967, 'gas_limit_bound_divisor':=1024, 'maximum_extra_data_size':=32, 'min_gas_limit':=5000}}
apps/ex_wire/lib/ex_wire/framing/frame.ex:19: Function frame/3 has no local return
apps/ex_wire/lib/ex_wire/framing/frame.ex:82: The call 'Elixir.ExWire.Framing.Frame':update_mac(Vegress_mac@3::{'fake',_} | {'kec',_},Vmac_encoder@1::{atom(),integer(),'cbc' | 'ctr' | 'ecb'},Vmac_secret@1::binary(),'nil') breaks the contract ('Elixir.ExthCrypto.MAC':mac_inst(),'Elixir.ExthCrypto.Cipher':cipher(),'Elixir.ExthCrypto.Key':symmetric_key(),binary()) -> 'Elixir.ExthCrypto.MAC':mac_inst()
apps/ex_wire/lib/ex_wire/framing/frame.ex:148: The call 'Elixir.ExWire.Framing.Frame':update_mac(Vingress_mac@3::{'fake',_} | {'kec',_},Vmac_encoder@1::{atom(),integer(),'cbc' | 'ctr' | 'ecb'},Vmac_secret@1::binary(),'nil') breaks the contract ('Elixir.ExthCrypto.MAC':mac_inst(),'Elixir.ExthCrypto.Cipher':cipher(),'Elixir.ExthCrypto.Key':symmetric_key(),binary()) -> 'Elixir.ExthCrypto.MAC':mac_inst()
apps/ex_wire/lib/ex_wire/handler/find_neighbours.ex:26: Invalid type specification for function 'Elixir.ExWire.Handler.FindNeighbours':handle/1. The success typing is (atom() | #{'timestamp':=_, _=>_}) -> #{'__struct__':='Elixir.ExWire.Message.Neighbours', 'nodes':=[], 'timestamp':=_}
apps/ex_wire/lib/ex_wire/handler/ping.ex:33: Invalid type specification for function 'Elixir.ExWire.Handler.Ping':handle/1. The success typing is (atom() | #{'data':=binary(), 'hash':=_, 'timestamp':=_, _=>_}) -> #{'__struct__':='Elixir.ExWire.Message.Pong', 'hash':=_, 'timestamp':=_, 'to':=#{'__struct__':='Elixir.ExWire.Struct.Endpoint', 'ip':=[byte()], 'tcp_port':='nil' | pos_integer(), 'udp_port':='nil' | pos_integer()}}
apps/ex_wire/lib/ex_wire/handshake/eip_8.ex:56: The pattern {'ok', Venc_auth_body@1} can never match the type {'error',<<_:64,_:_*8>>}
apps/ex_wire/lib/ex_wire/handshake/eip_8.ex:120: The pattern {'ok', Vrlp_bin@1} can never match the type {'error',<<_:64,_:_*8>>}
apps/ex_wire/lib/ex_wire/handshake/handshake.ex:66: The pattern {'ok', Vrlp@1, _bin@1, Vframe_rest@1} can never match the type {'error',<<_:64,_:_*8>>}
apps/ex_wire/lib/ex_wire/handshake/handshake.ex:77: The pattern {'ok', Vplaintext@1} can never match the type {'error',<<_:64,_:_*8>>}
apps/ex_wire/lib/ex_wire/handshake/handshake.ex:113: The pattern {'ok', Vrlp@1, Vack_resp_bin@1, Vframe_rest@1} can never match the type {'error',<<_:64,_:_*8>>}
apps/ex_wire/lib/ex_wire/handshake/handshake.ex:125: The pattern {'ok', Vplaintext@1} can never match the type {'error',<<_:64,_:_*8>>}
apps/ex_wire/lib/ex_wire/handshake/handshake.ex:173: Invalid type specification for function 'Elixir.ExWire.Handshake':build_auth_msg/5. The success typing is (_,binary(),binary(),'false' | 'nil' | binary(),'false' | 'nil' | {_,binary()}) -> {#{'__struct__':='Elixir.ExWire.Handshake.Struct.AuthMsgV4', 'remote_ephemeral_public_key':='nil', 'remote_nonce':=binary(), 'remote_public_key':=_, 'remote_version':=63, 'signature':=binary()},{_,binary()},binary()}
apps/ex_wire/lib/ex_wire/handshake/handshake.ex:256: The pattern {'ok', #{'remote_ephemeral_public_key':=Vremote_ephemeral_public_key@1, '__struct__':='Elixir.ExWire.Handshake.Struct.AckRespV4', 'remote_nonce':=Vremote_nonce@1}, Vack_data_limited@1, Vframe_rest@1} can never match the type {'error',<<_:64,_:_*8>>}
apps/ex_wire/lib/ex_wire/handshake/handshake.ex:299: The pattern {'ok', #{'remote_version':=Vremote_version@1, 'remote_ephemeral_public_key':=Vremote_ephemeral_public_key@1, 'remote_public_key':=_remote_public_key@1, '__struct__':='Elixir.ExWire.Handshake.Struct.AuthMsgV4', 'remote_nonce':=Vremote_nonce@1, 'signature':=_signature@1}} can never match the type {'error',<<_:64,_:_*8>>}
apps/ex_wire/lib/ex_wire/handshake/struct/auth_msg_v4.ex:36: Invalid type specification for function 'Elixir.ExWire.Handshake.Struct.AuthMsgV4':deserialize/1. The success typing is (nonempty_maybe_improper_list()) -> #{'__struct__':='Elixir.ExWire.Handshake.Struct.AuthMsgV4', 'remote_ephemeral_public_key':='nil', 'remote_nonce':=_, 'remote_public_key':=binary(), 'remote_version':=_, 'signature':=_}
apps/ex_wire/lib/ex_wire/message/find_neighbours.ex:56: The specified type for the 1st argument of encode/1 (#{'__struct__':='Elixir.ExWire.Message.FindNeighbours', 'target':=binary(), 'timestamp':=integer()}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.ExWire.Message' behaviour
apps/ex_wire/lib/ex_wire/message/find_neighbours.ex:57: The inferred type for the 1st argument of encode/1 (#{'__struct__':='Elixir.ExWire.Message.FindNeighbours', 'target':=_, 'timestamp':=_, _=>_}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.ExWire.Message' behaviour
apps/ex_wire/lib/ex_wire/message/find_neighbours.ex:72: The specified type for the 1st argument of to/1 (#{'__struct__':='Elixir.ExWire.Message.FindNeighbours', 'target':=binary(), 'timestamp':=integer()}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.ExWire.Message' behaviour
apps/ex_wire/lib/ex_wire/message/neighbours.ex:88: The specified type for the 1st argument of encode/1 (#{'__struct__':='Elixir.ExWire.Message.Neighbours', 'nodes':=[#{'__struct__':='Elixir.ExWire.Struct.Neighbour', 'endpoint':=#{'__struct__':='Elixir.ExWire.Struct.Endpoint', 'ip':=[integer()], 'tcp_port':='nil' | integer(), 'udp_port':='nil' | integer()}, 'node':=binary()}], 'timestamp':=integer()}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.ExWire.Message' behaviour
apps/ex_wire/lib/ex_wire/message/neighbours.ex:89: The inferred type for the 1st argument of encode/1 (#{'__struct__':='Elixir.ExWire.Message.Neighbours', 'nodes':=_, 'timestamp':=_, _=>_}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.ExWire.Message' behaviour
apps/ex_wire/lib/ex_wire/message/neighbours.ex:104: The specified type for the 1st argument of to/1 (#{'__struct__':='Elixir.ExWire.Message.Neighbours', 'nodes':=[#{'__struct__':='Elixir.ExWire.Struct.Neighbour', 'endpoint':=#{'__struct__':='Elixir.ExWire.Struct.Endpoint', 'ip':=[integer()], 'tcp_port':='nil' | integer(), 'udp_port':='nil' | integer()}, 'node':=binary()}], 'timestamp':=integer()}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.ExWire.Message' behaviour
apps/ex_wire/lib/ex_wire/message/ping.ex:68: The specified type for the 1st argument of encode/1 (#{'__struct__':='Elixir.ExWire.Message.Ping', 'from':=#{'__struct__':='Elixir.ExWire.Struct.Endpoint', 'ip':=[integer()], 'tcp_port':='nil' | integer(), 'udp_port':='nil' | integer()}, 'timestamp':=integer(), 'to':=#{'__struct__':='Elixir.ExWire.Struct.Endpoint', 'ip':=[integer()], 'tcp_port':='nil' | integer(), 'udp_port':='nil' | integer()}, 'version':=integer()}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.ExWire.Message' behaviour
apps/ex_wire/lib/ex_wire/message/ping.ex:69: The inferred type for the 1st argument of encode/1 (#{'__struct__':='Elixir.ExWire.Message.Ping', 'from':=#{'__struct__':='Elixir.ExWire.Struct.Endpoint', 'ip':=[byte()], 'tcp_port':='nil' | non_neg_integer(), 'udp_port':='nil' | non_neg_integer()}, 'timestamp':=_, 'to':=#{'__struct__':='Elixir.ExWire.Struct.Endpoint', 'ip':=[byte()], 'tcp_port':='nil' | non_neg_integer(), 'udp_port':='nil' | non_neg_integer()}, 'version':=_, _=>_}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.ExWire.Message' behaviour
apps/ex_wire/lib/ex_wire/message/ping.ex:91: The specified type for the 1st argument of to/1 (#{'__struct__':='Elixir.ExWire.Message.Ping', 'from':=#{'__struct__':='Elixir.ExWire.Struct.Endpoint', 'ip':=[integer()], 'tcp_port':='nil' | integer(), 'udp_port':='nil' | integer()}, 'timestamp':=integer(), 'to':=#{'__struct__':='Elixir.ExWire.Struct.Endpoint', 'ip':=[integer()], 'tcp_port':='nil' | integer(), 'udp_port':='nil' | integer()}, 'version':=integer()}) is not a supertype of atom(), which is expected type for this argument in the callback of the 'Elixir.ExWire.Message' behaviour
apps/ex_wire/lib/ex_wire/packet/block_bodies.ex:44: The specified type for the 1st argument of serialize/1 (#{'__struct__':='Elixir.ExWire.Packet.BlockBodies', 'blocks':=[#{'__struct__':='Elixir.ExWire.Struct.Block', 'ommers':=[binary()], 'transactions':=[#{'__struct__':='Elixir.Blockchain.Transaction', 'data':=binary(), 'gas_limit':=integer(), 'gas_price':=integer(), 'init':=binary(), 'nonce':=integer(), 'r':=integer(), 's':=integer(), 'to':=<<_:_*160>>, 'v':=integer(), 'value':=integer()}], 'transactions_list':=_}]}) is not a supertype of #{}, which is expected type for this argument in the callback of the 'Elixir.ExWire.Packet' behaviour
apps/ex_wire/lib/ex_wire/packet/block_bodies.ex:45: The inferred type for the 1st argument of serialize/1 (#{'__struct__':='Elixir.ExWire.Packet.BlockBodies', 'blocks':=_, _=>_}) is not a supertype of #{}, which is expected type for this argument in the callback of the 'Elixir.ExWire.Packet' behaviour
apps/ex_wire/lib/ex_wire/packet/block_bodies.ex:71: The return type #{'__struct__':='Elixir.ExWire.Packet.BlockBodies', 'blocks':=[#{'__struct__':='Elixir.ExWire.Struct.Block', 'ommers':=[binary()], 'transactions':=[#{'__struct__':='Elixir.Blockchain.Transaction', 'data':=binary(), 'gas_limit':=integer(), 'gas_price':=integer(), 'init':=binary(), 'nonce':=integer(), 'r':=integer(), 's':=integer(), 'to':=<<_:_*160>>, 'v':=integer(), 'value':=integer()}], 'transactions_list':=_}]} in the specification of deserialize/1 is not a subtype of #{}, which is the expected return type for the callback of the 'Elixir.ExWire.Packet' behaviour
apps/ex_wire/lib/ex_wire/packet/block_bodies.ex:72: The inferred return type of deserialize/1 (#{'__struct__':='Elixir.ExWire.Packet.BlockBodies', 'blocks':=[any()]}) has nothing in common with #{}, which is the expected return type for the callback of the 'Elixir.ExWire.Packet' behaviour
apps/ex_wire/lib/ex_wire/packet/block_bodies.ex:90: Invalid type specification for function 'Elixir.ExWire.Packet.BlockBodies':handle/1. The success typing is (#{'__struct__':='Elixir.ExWire.Packet.BlockBodies', 'blocks':=_, _=>_}) -> 'ok'
apps/ex_wire/lib/ex_wire/packet/block_bodies.ex:91: The inferred type for the 1st argument of handle/1 (#{'__struct__':='Elixir.ExWire.Packet.BlockBodies', 'blocks':=_, _=>_}) is not a supertype of #{}, which is expected type for this argument in the callback of the 'Elixir.ExWire.Packet' behaviour
apps/ex_wire/lib/ex_wire/packet/block_headers.ex:40: The specified type for the 1st argument of serialize/1 (#{'__struct__':='Elixir.ExWire.Packet.BlockHeaders', 'headers':=[#{'__struct__':='Elixir.Block.Header', 'beneficiary':=<<_:160>>, 'difficulty':='nil' | integer(), 'extra_data':=binary(), 'gas_limit':=integer(), 'gas_used':=integer(), 'logs_bloom':=binary(), 'mix_hash':='nil' | <<_:256>>, 'nonce':='nil' | <<_:64>>, 'number':='nil' | integer(), 'ommers_hash':=binary(), 'parent_hash':=<<_:256>>, 'receipts_root':=binary(), 'state_root':=binary(), 'timestamp':='nil' | integer(), 'transactions_root':=binary()}]}) is not a supertype of #{}, which is expected type for this argument in the callback of the 'Elixir.ExWire.Packet' behaviour
apps/ex_wire/lib/ex_wire/packet/block_headers.ex:41: The inferred type for the 1st argument of serialize/1 (#{'__struct__':='Elixir.ExWire.Packet.BlockHeaders', 'headers':=_, _=>_}) is not a supertype of #{}, which is expected type for this argument in the callback of the 'Elixir.ExWire.Packet' behaviour
apps/ex_wire/lib/ex_wire/packet/block_headers.ex:58: The return type #{'__struct__':='Elixir.ExWire.Packet.BlockHeaders', 'headers':=[#{'__struct__':='Elixir.Block.Header', 'beneficiary':=<<_:160>>, 'difficulty':='nil' | integer(), 'extra_data':=binary(), 'gas_limit':=integer(), 'gas_used':=integer(), 'logs_bloom':=binary(), 'mix_hash':='nil' | <<_:256>>, 'nonce':='nil' | <<_:64>>, 'number':='nil' | integer(), 'ommers_hash':=binary(), 'parent_hash':=<<_:256>>, 'receipts_root':=binary(), 'state_root':=binary(), 'timestamp':='nil' | integer(), 'transactions_root':=binary()}]} in the specification of deserialize/1 is not a subtype of #{}, which is the expected return type for the callback of the 'Elixir.ExWire.Packet' behaviour
apps/ex_wire/lib/ex_wire/packet/block_headers.ex:59: The inferred return type of deserialize/1 (#{'__struct__':='Elixir.ExWire.Packet.BlockHeaders', 'headers':=[any()]}) has nothing in common with #{}, which is the expected return type for the callback of the 'Elixir.ExWire.Packet' behaviour
apps/ex_wire/lib/ex_wire/packet/block_headers.ex:77: Invalid type specification for function 'Elixir.ExWire.Packet.BlockHeaders':handle/1. The success typing is (#{'__struct__':='Elixir.ExWire.Packet.BlockHeaders', 'headers':=_, _=>_}) -> 'ok'
apps/ex_wire/lib/ex_wire/packet/block_headers.ex:78: The inferred type for the 1st argument of handle/1 (#{'__struct__':='Elixir.ExWire.Packet.BlockHeaders', 'headers':=_, _=>_}) is not a supertype of #{}, which is expected type for this argument in the callback of the 'Elixir.ExWire.Packet' behaviour
apps/ex_wire/lib/ex_wire/packet/disconnect.ex:85: The specified type for the 1st argument of serialize/1 (#{'__struct__':='Elixir.ExWire.Packet.Disconnect', 'reason':=integer()}) is not a supertype of #{}, which is expected type for this argument in the callback of the 'Elixir.ExWire.Packet' behaviour
apps/ex_wire/lib/ex_wire/packet/disconnect.ex:86: The inferred type for the 1st argument of serialize/1 (#{'__struct__':='Elixir.ExWire.Packet.Disconnect', 'reason':=_, _=>_}) is not a supertype of #{}, which is expected type for this argument in the callback of the 'Elixir.ExWire.Packet' behaviour
apps/ex_wire/lib/ex_wire/packet/disconnect.ex:101: The return type #{'__struct__':='Elixir.ExWire.Packet.Disconnect', 'reason':=integer()} in the specification of deserialize/1 is not a subtype of #{}, which is the expected return type for the callback of the 'Elixir.ExWire.Packet' behaviour
apps/ex_wire/lib/ex_wire/packet/disconnect.ex:102: The inferred return type of deserialize/1 (#{'__struct__':='Elixir.ExWire.Packet.Disconnect', 'reason':=_}) has nothing in common with #{}, which is the expected return type for the callback of the 'Elixir.ExWire.Packet' behaviour
apps/ex_wire/lib/ex_wire/packet/disconnect.ex:155: Invalid type specification for function 'Elixir.ExWire.Packet.Disconnect':handle/1. The success typing is (#{'__struct__':='Elixir.ExWire.Packet.Disconnect', 'reason':=integer(), _=>_}) -> 'peer_disconnect'
apps/ex_wire/lib/ex_wire/packet/disconnect.ex:156: The inferred type for the 1st argument of handle/1 (#{'__struct__':='Elixir.ExWire.Packet.Disconnect', 'reason':=integer(), _=>_}) is not a supertype of #{}, which is expected type for this argument in the callback of the 'Elixir.ExWire.Packet' behaviour
apps/ex_wire/lib/ex_wire/packet/disconnect.ex:158: Guard test _@2::binary() =:= 'false' can never succeed
apps/ex_wire/lib/ex_wire/packet/get_block_bodies.ex:30: The specified type for the 1st argument of serialize/1 (#{'__struct__':='Elixir.ExWire.Packet.GetBlockBodies', 'hashes':=[binary()]}) is not a supertype of #{}, which is expected type for this argument in the callback of the 'Elixir.ExWire.Packet' behaviour
apps/ex_wire/lib/ex_wire/packet/get_block_bodies.ex:31: The inferred type for the 1st argument of serialize/1 (#{'__struct__':='Elixir.ExWire.Packet.GetBlockBodies', 'hashes':=_, _=>_}) is not a supertype of #{}, which is expected type for this argument in the callback of the 'Elixir.ExWire.Packet' behaviour
apps/ex_wire/lib/ex_wire/packet/get_block_bodies.ex:44: The return type #{'__struct__':='Elixir.ExWire.Packet.GetBlockBodies', 'hashes':=[binary()]} in the specification of deserialize/1 is not a subtype of #{}, which is the expected return type for the callback of the 'Elixir.ExWire.Packet' behaviour
apps/ex_wire/lib/ex_wire/packet/get_block_bodies.ex:45: The inferred return type of deserialize/1 (#{'__struct__':='Elixir.ExWire.Packet.GetBlockBodies', 'hashes':=nonempty_maybe_improper_list()}) has nothing in common with #{}, which is the expected return type for the callback of the 'Elixir.ExWire.Packet' behaviour
apps/ex_wire/lib/ex_wire/packet/get_block_bodies.ex:64: Invalid type specification for function 'Elixir.ExWire.Packet.GetBlockBodies':handle/1. The success typing is (#{'__struct__':='Elixir.ExWire.Packet.GetBlockBodies', _=>_}) -> 'ok'
apps/ex_wire/lib/ex_wire/packet/get_block_bodies.ex:65: The inferred type for the 1st argument of handle/1 (#{'__struct__':='Elixir.ExWire.Packet.GetBlockBodies', _=>_}) is not a supertype of #{}, which is expected type for this argument in the callback of the 'Elixir.ExWire.Packet' behaviour
apps/ex_wire/lib/ex_wire/packet/get_block_headers.ex:45: The specified type for the 1st argument of serialize/1 (#{'__struct__':='Elixir.ExWire.Packet.GetBlockHeaders', 'block_identifier':=binary() | integer(), 'max_headers':=integer(), 'reverse':=boolean(), 'skip':=integer()}) is not a supertype of #{}, which is expected type for this argument in the callback of the 'Elixir.ExWire.Packet' behaviour
apps/ex_wire/lib/ex_wire/packet/get_block_headers.ex:46: The inferred type for the 1st argument of serialize/1 (#{'__struct__':='Elixir.ExWire.Packet.GetBlockHeaders', 'block_identifier':=_, 'max_headers':=_, 'reverse':=_, 'skip':=_, _=>_}) is not a supertype of #{}, which is expected type for this argument in the callback of the 'Elixir.ExWire.Packet' behaviour
apps/ex_wire/lib/ex_wire/packet/get_block_headers.ex:67: The return type #{'__struct__':='Elixir.ExWire.Packet.GetBlockHeaders', 'block_identifier':=binary() | integer(), 'max_headers':=integer(), 'reverse':=boolean(), 'skip':=integer()} in the specification of deserialize/1 is not a subtype of #{}, which is the expected return type for the callback of the 'Elixir.ExWire.Packet' behaviour
apps/ex_wire/lib/ex_wire/packet/get_block_headers.ex:68: The inferred return type of deserialize/1 (#{'__struct__':='Elixir.ExWire.Packet.GetBlockHeaders', 'block_identifier':=_, 'max_headers':=_, 'reverse':=boolean(), 'skip':=_}) has nothing in common with #{}, which is the expected return type for the callback of the 'Elixir.ExWire.Packet' behaviour
apps/ex_wire/lib/ex_wire/packet/get_block_headers.ex:94: Invalid type specification for function 'Elixir.ExWire.Packet.GetBlockHeaders':handle/1. The success typing is (#{'__struct__':='Elixir.ExWire.Packet.GetBlockHeaders', _=>_}) -> 'ok'
apps/ex_wire/lib/ex_wire/packet/get_block_headers.ex:95: The inferred type for the 1st argument of handle/1 (#{'__struct__':='Elixir.ExWire.Packet.GetBlockHeaders', _=>_}) is not a supertype of #{}, which is expected type for this argument in the callback of the 'Elixir.ExWire.Packet' behaviour
apps/ex_wire/lib/ex_wire/packet/hello.ex:53: The specified type for the 1st argument of serialize/1 (#{'__struct__':='Elixir.ExWire.Packet.Hello', 'caps':=[{binary(),integer()}], 'client_id':=binary(), 'listen_port':=integer(), 'node_id':=binary(), 'p2p_version':=integer()}) is not a supertype of #{}, which is expected type for this argument in the callback of the 'Elixir.ExWire.Packet' behaviour
apps/ex_wire/lib/ex_wire/packet/hello.ex:54: The inferred type for the 1st argument of serialize/1 (#{'__struct__':='Elixir.ExWire.Packet.Hello', 'caps':=_, 'client_id':=_, 'listen_port':=_, 'node_id':=_, 'p2p_version':=_, _=>_}) is not a supertype of #{}, which is expected type for this argument in the callback of the 'Elixir.ExWire.Packet' behaviour
apps/ex_wire/lib/ex_wire/packet/hello.ex:73: The return type #{'__struct__':='Elixir.ExWire.Packet.Hello', 'caps':=[{binary(),integer()}], 'client_id':=binary(), 'listen_port':=integer(), 'node_id':=binary(), 'p2p_version':=integer()} in the specification of deserialize/1 is not a subtype of #{}, which is the expected return type for the callback of the 'Elixir.ExWire.Packet' behaviour
apps/ex_wire/lib/ex_wire/packet/hello.ex:74: The inferred return type of deserialize/1 (#{'__struct__':='Elixir.ExWire.Packet.Hello', 'caps':=[any()], 'client_id':=_, 'listen_port':=non_neg_integer(), 'node_id':=_, 'p2p_version':=non_neg_integer()}) has nothing in common with #{}, which is the expected return type for the callback of the 'Elixir.ExWire.Packet' behaviour
apps/ex_wire/lib/ex_wire/packet/hello.ex:107: Invalid type specification for function 'Elixir.ExWire.Packet.Hello':handle/1. The success typing is (#{'__struct__':='Elixir.ExWire.Packet.Hello', 'caps':=_, _=>_}) -> 'activate' | {'disconnect','useless_peer'}
apps/ex_wire/lib/ex_wire/packet/hello.ex:108: The inferred type for the 1st argument of handle/1 (#{'__struct__':='Elixir.ExWire.Packet.Hello', 'caps':=_, _=>_}) is not a supertype of #{}, which is expected type for this argument in the callback of the 'Elixir.ExWire.Packet' behaviour
apps/ex_wire/lib/ex_wire/packet/new_block_hashes.ex:43: The specified type for the 1st argument of serialize/1 (#{'__struct__':='Elixir.ExWire.Packet.NewBlockHashes', 'hashes':=[{binary(),integer()}]}) is not a supertype of #{}, which is expected type for this argument in the callback of the 'Elixir.ExWire.Packet' behaviour
apps/ex_wire/lib/ex_wire/packet/new_block_hashes.ex:44: The inferred type for the 1st argument of serialize/1 (#{'__struct__':='Elixir.ExWire.Packet.NewBlockHashes', 'hashes':=_, _=>_}) is not a supertype of #{}, which is expected type for this argument in the callback of the 'Elixir.ExWire.Packet' behaviour
apps/ex_wire/lib/ex_wire/packet/new_block_hashes.ex:60: The return type #{'__struct__':='Elixir.ExWire.Packet.NewBlockHashes', 'hashes':=[{binary(),integer()}]} in the specification of deserialize/1 is not a subtype of #{}, which is the expected return type for the callback of the 'Elixir.ExWire.Packet' behaviour
apps/ex_wire/lib/ex_wire/packet/new_block_hashes.ex:61: The inferred return type of deserialize/1 (#{'__struct__':='Elixir.ExWire.Packet.NewBlockHashes', 'hashes':=[any()]}) has nothing in common with #{}, which is the expected return type for the callback of the 'Elixir.ExWire.Packet' behaviour
apps/ex_wire/lib/ex_wire/packet/new_block_hashes.ex:83: Invalid type specification for function 'Elixir.ExWire.Packet.NewBlockHashes':handle/1. The success typing is (#{'__struct__':='Elixir.ExWire.Packet.NewBlockHashes', _=>_}) -> 'ok'
apps/ex_wire/lib/ex_wire/packet/new_block_hashes.ex:84: The inferred type for the 1st argument of handle/1 (#{'__struct__':='Elixir.ExWire.Packet.NewBlockHashes', _=>_}) is not a supertype of #{}, which is expected type for this argument in the callback of the 'Elixir.ExWire.Packet' behaviour
apps/ex_wire/lib/ex_wire/packet/ping.ex:29: The specified type for the 1st argument of serialize/1 (#{'__struct__':='Elixir.ExWire.Packet.Ping'}) is not a supertype of #{}, which is expected type for this argument in the callback of the 'Elixir.ExWire.Packet' behaviour
apps/ex_wire/lib/ex_wire/packet/ping.ex:30: The inferred type for the 1st argument of serialize/1 (#{'__struct__':='Elixir.ExWire.Packet.Ping', _=>_}) is not a supertype of #{}, which is expected type for this argument in the callback of the 'Elixir.ExWire.Packet' behaviour
apps/ex_wire/lib/ex_wire/packet/ping.ex:43: The return type #{'__struct__':='Elixir.ExWire.Packet.Ping'} in the specification of deserialize/1 is not a subtype of #{}, which is the expected return type for the callback of the 'Elixir.ExWire.Packet' behaviour
apps/ex_wire/lib/ex_wire/packet/ping.ex:44: The inferred return type of deserialize/1 (#{'__struct__':='Elixir.ExWire.Packet.Ping'}) has nothing in common with #{}, which is the expected return type for the callback of the 'Elixir.ExWire.Packet' behaviour
apps/ex_wire/lib/ex_wire/packet/ping.ex:58: Invalid type specification for function 'Elixir.ExWire.Packet.Ping':handle/1. The success typing is (#{'__struct__':='Elixir.ExWire.Packet.Ping', _=>_}) -> {'send',#{'__struct__':='Elixir.ExWire.Packet.Pong'}}
apps/ex_wire/lib/ex_wire/packet/ping.ex:59: The inferred type for the 1st argument of handle/1 (#{'__struct__':='Elixir.ExWire.Packet.Ping', _=>_}) is not a supertype of #{}, which is expected type for this argument in the callback of the 'Elixir.ExWire.Packet' behaviour
apps/ex_wire/lib/ex_wire/packet/pong.ex:27: The specified type for the 1st argument of serialize/1 (#{'__struct__':='Elixir.ExWire.Packet.Pong'}) is not a supertype of #{}, which is expected type for this argument in the callback of the 'Elixir.ExWire.Packet' behaviour
apps/ex_wire/lib/ex_wire/packet/pong.ex:28: The inferred type for the 1st argument of serialize/1 (#{'__struct__':='Elixir.ExWire.Packet.Pong', _=>_}) is not a supertype of #{}, which is expected type for this argument in the callback of the 'Elixir.ExWire.Packet' behaviour
apps/ex_wire/lib/ex_wire/packet/pong.ex:41: The return type #{'__struct__':='Elixir.ExWire.Packet.Pong'} in the specification of deserialize/1 is not a subtype of #{}, which is the expected return type for the callback of the 'Elixir.ExWire.Packet' behaviour
apps/ex_wire/lib/ex_wire/packet/pong.ex:42: The inferred return type of deserialize/1 (#{'__struct__':='Elixir.ExWire.Packet.Pong'}) has nothing in common with #{}, which is the expected return type for the callback of the 'Elixir.ExWire.Packet' behaviour
apps/ex_wire/lib/ex_wire/packet/pong.ex:57: Invalid type specification for function 'Elixir.ExWire.Packet.Pong':handle/1. The success typing is (#{'__struct__':='Elixir.ExWire.Packet.Pong', _=>_}) -> 'ok'
apps/ex_wire/lib/ex_wire/packet/pong.ex:58: The inferred type for the 1st argument of handle/1 (#{'__struct__':='Elixir.ExWire.Packet.Pong', _=>_}) is not a supertype of #{}, which is expected type for this argument in the callback of the 'Elixir.ExWire.Packet' behaviour
apps/ex_wire/lib/ex_wire/packet/status.ex:61: The specified type for the 1st argument of serialize/1 (#{'__struct__':='Elixir.ExWire.Packet.Status', 'best_hash':=binary(), 'block_number':=integer(), 'genesis_hash':=binary(), 'manifest_hash':=binary(), 'network_id':=integer(), 'protocol_version':=integer(), 'total_difficulty':=integer()}) is not a supertype of #{}, which is expected type for this argument in the callback of the 'Elixir.ExWire.Packet' behaviour
apps/ex_wire/lib/ex_wire/packet/status.ex:62: The inferred type for the 1st argument of serialize/1 (#{'__struct__':='Elixir.ExWire.Packet.Status', 'best_hash':=_, 'genesis_hash':=_, 'network_id':=_, 'protocol_version':=_, 'total_difficulty':=_, _=>_}) is not a supertype of #{}, which is expected type for this argument in the callback of the 'Elixir.ExWire.Packet' behaviour
apps/ex_wire/lib/ex_wire/packet/status.ex:85: The return type #{'__struct__':='Elixir.ExWire.Packet.Status', 'best_hash':=binary(), 'block_number':=integer(), 'genesis_hash':=binary(), 'manifest_hash':=binary(), 'network_id':=integer(), 'protocol_version':=integer(), 'total_difficulty':=integer()} in the specification of deserialize/1 is not a subtype of #{}, which is the expected return type for the callback of the 'Elixir.ExWire.Packet' behaviour
apps/ex_wire/lib/ex_wire/packet/status.ex:86: The inferred return type of deserialize/1 (#{'__struct__':='Elixir.ExWire.Packet.Status', 'best_hash':=_, 'block_number':='nil' | non_neg_integer(), 'genesis_hash':=_, 'manifest_hash':=_, 'network_id':=non_neg_integer(), 'protocol_version':=non_neg_integer(), 'total_difficulty':=non_neg_integer()}) has nothing in common with #{}, which is the expected return type for the callback of the 'Elixir.ExWire.Packet' behaviour
apps/ex_wire/lib/ex_wire/packet/status.ex:130: Invalid type specification for function 'Elixir.ExWire.Packet.Status':handle/1. The success typing is (#{'__struct__':='Elixir.ExWire.Packet.Status', 'protocol_version':=_, _=>_}) -> 'ok' | {'disconnect','useless_peer'}
apps/ex_wire/lib/ex_wire/packet/status.ex:131: The inferred type for the 1st argument of handle/1 (#{'__struct__':='Elixir.ExWire.Packet.Status', 'protocol_version':=_, _=>_}) is not a supertype of #{}, which is expected type for this argument in the callback of the 'Elixir.ExWire.Packet' behaviour
apps/ex_wire/lib/ex_wire/packet/transactions.ex:42: The specified type for the 1st argument of serialize/1 (#{'__struct__':='Elixir.ExWire.Packet.Transactions', 'transactions':=[any()]}) is not a supertype of #{}, which is expected type for this argument in the callback of the 'Elixir.ExWire.Packet' behaviour
apps/ex_wire/lib/ex_wire/packet/transactions.ex:43: The inferred type for the 1st argument of serialize/1 (#{'__struct__':='Elixir.ExWire.Packet.Transactions', 'transactions':=_, _=>_}) is not a supertype of #{}, which is expected type for this argument in the callback of the 'Elixir.ExWire.Packet' behaviour
apps/ex_wire/lib/ex_wire/packet/transactions.ex:62: The return type #{'__struct__':='Elixir.ExWire.Packet.Transactions', 'transactions':=[any()]} in the specification of deserialize/1 is not a subtype of #{}, which is the expected return type for the callback of the 'Elixir.ExWire.Packet' behaviour
apps/ex_wire/lib/ex_wire/packet/transactions.ex:63: The inferred return type of deserialize/1 (#{'__struct__':='Elixir.ExWire.Packet.Transactions', 'transactions':=_}) has nothing in common with #{}, which is the expected return type for the callback of the 'Elixir.ExWire.Packet' behaviour
apps/ex_wire/lib/ex_wire/packet/transactions.ex:81: Invalid type specification for function 'Elixir.ExWire.Packet.Transactions':handle/1. The success typing is (#{'__struct__':='Elixir.ExWire.Packet.Transactions', 'transactions':=_, _=>_}) -> 'ok'
apps/ex_wire/lib/ex_wire/packet/transactions.ex:82: The inferred type for the 1st argument of handle/1 (#{'__struct__':='Elixir.ExWire.Packet.Transactions', 'transactions':=_, _=>_}) is not a supertype of #{}, which is expected type for this argument in the callback of the 'Elixir.ExWire.Packet' behaviour
apps/ex_wire/lib/ex_wire/struct/block_queue.ex:165: Invalid type specification for function 'Elixir.ExWire.Struct.BlockQueue':add_block_struct_to_block_queue/5. The success typing is (#{'__struct__':='Elixir.ExWire.Struct.BlockQueue', 'queue':=_, _=>_},#{'__struct__':='Elixir.Blockchain.Blocktree', 'block':='root' | #{'__struct__':='Elixir.Blockchain.Block', 'block_hash':='nil' | <<_:256>>, 'header':=map(), 'ommers':=[any()], 'transactions':=[any()]}, 'children':=#{<<_:256>>=>map()}, 'parent_map':=#{<<_:256>>=><<_:256>>}, 'total_difficulty':=integer()},atom() | #{'ommers':=[<<_:256>>], 'transactions_list':=[any()], _=>_},#{'__struct__':='Elixir.Blockchain.Chain', 'accounts':=#{<<_:160>>=>map()}, 'engine':=#{binary()=>map()}, 'genesis':=#{'author':=<<_:160>>, 'difficulty':=integer(), 'extra_data':=binary(), 'gas_limit':=integer(), 'mix_hash':=binary(), 'nonce':=binary(), 'parent_hash':=<<_:256>>, 'timestamp':=integer()}, 'name':=binary(), 'nodes':=[binary()], 'params':=#{'account_start_nonce':=integer(), 'block_reward':=integer(), 'eip155_transition':=integer(), 'eip86_transition':=integer(), 'eip98_transition':=integer(), 'gas_limit_bound_divisor':=integer(), 'maximum_extra_data_size':=integer(), 'min_gas_limit':=integer()}},{atom(),_}) -> {#{'__struct__':='Elixir.ExWire.Struct.BlockQueue', 'do_validation':=boolean(), 'queue':=map()},#{'__struct__':='Elixir.Blockchain.Blocktree', 'block':='root' | map(), 'children':=map(), 'parent_map':=map(), 'total_difficulty':=integer()}}
apps/ex_wire/lib/ex_wire/struct/block_queue.ex:258: The pattern 'parent_not_found' can never match the type {'invalid',['child_number_invalid' | 'child_timestamp_invalid' | 'exceeded_gas_limit' | 'extra_data_too_large' | 'invalid_difficulty' | 'invalid_gas_limit' | 'ommers_hash_mismatch' | 'receipts_root_mismatch' | 'state_root_mismatch' | 'transactions_root_mismatch']} | {'ok',#{'__struct__':='Elixir.Blockchain.Blocktree', 'block':='root' | #{'__struct__':='Elixir.Blockchain.Block', 'block_hash':='nil' | <<_:256>>, 'header':=map(), 'ommers':=[any()], 'transactions':=[any()]}, 'children':=#{<<_:256>>=>map()}, 'parent_map':=#{<<_:256>>=><<_:256>>}, 'total_difficulty':=integer()}}
apps/ex_wire/lib/ex_wire/sync.ex:148: The pattern 'root' can never match the type #{'__struct__':='Elixir.Blockchain.Block', 'block_hash':='nil' | <<_:256>>, 'header':=#{'__struct__':='Elixir.Block.Header', 'beneficiary':=<<_:160>>, 'difficulty':='nil' | integer(), 'extra_data':=binary(), 'gas_limit':=integer(), 'gas_used':=integer(), 'logs_bloom':=binary(), 'mix_hash':='nil' | <<_:256>>, 'nonce':='nil' | <<_:64>>, 'number':='nil' | integer(), 'ommers_hash':=binary(), 'parent_hash':=<<_:256>>, 'receipts_root':=binary(), 'state_root':=binary(), 'timestamp':='nil' | integer(), 'transactions_root':=binary()}, 'ommers':=[#{'__struct__':='Elixir.Block.Header', 'beneficiary':=<<_:160>>, 'difficulty':='nil' | integer(), 'extra_data':=binary(), 'gas_limit':=integer(), 'gas_used':=integer(), 'logs_bloom':=binary(), 'mix_hash':='nil' | <<_:256>>, 'nonce':='nil' | <<_:64>>, 'number':='nil' | integer(), 'ommers_hash':=binary(), 'parent_hash':=<<_:256>>, 'receipts_root':=binary(), 'state_root':=binary(), 'timestamp':='nil' | integer(), 'transactions_root':=binary()}], 'transactions':=[#{'__struct__':='Elixir.Blockchain.Transaction', 'data':=binary(), 'gas_limit':=integer(), 'gas_price':=integer(), 'init':=binary(), 'nonce':=integer(), 'r':=integer(), 's':=integer(), 'to':=<<_:_*160>>, 'v':=integer(), 'value':=integer()}]}
apps/exth_crypto/lib/aes/aes.ex:161: The specification for 'Elixir.ExthCrypto.AES':stream_init/3 has an opaque subtype 'Elixir.ExthCrypto.Cipher':stream() which is violated by the success typing ('ctr',binary() | maybe_improper_list(binary() | maybe_improper_list(any(),binary() | []) | byte(),binary() | []),binary()) -> {'aes_ctr',binary() | {binary() | maybe_improper_list(binary() | maybe_improper_list(any(),binary() | []) | byte(),binary() | []),binary(),binary(),integer()}}
apps/exth_crypto/lib/aes/aes.ex:178: The specification for 'Elixir.ExthCrypto.AES':stream_encrypt/2 has an opaque subtype 'Elixir.ExthCrypto.Cipher':stream() which is violated by the success typing (binary() | maybe_improper_list(binary() | maybe_improper_list(any(),binary() | []) | byte(),binary() | []),_) -> {{_,_},_}
apps/exth_crypto/lib/aes/aes.ex:195: The specification for 'Elixir.ExthCrypto.AES':stream_decrypt/2 has an opaque subtype 'Elixir.ExthCrypto.Cipher':stream() which is violated by the success typing (binary() | maybe_improper_list(binary() | maybe_improper_list(any(),binary() | []) | byte(),binary() | []),_) -> {{_,_},_}
apps/exth_crypto/lib/mac/mac.ex:28: Function mac/3 has no local return
apps/exth_crypto/lib/mac/mac.ex:28: The call 'Elixir.ExthCrypto.MAC':mac(_@1::any(),_@2::any(),_@3::any(),'nil') breaks the contract (iodata(),iodata(),'Elixir.ExthCrypto.Hash':hash_algorithm(),integer()) -> mac()
apps/exth_crypto/lib/test.ex:75: The variable _@1 can never match since previous clauses completely covered the type <<_:8>>
apps/exth_crypto/lib/test.ex:75: Cons will produce an improper list since its 2nd argument is <<_:8>>
src/ethereum_abi_parser.yrl:64: The call ethereum_abi_parser:double_juxt_type('fixed',"x",128,19) will never return since it differs in the 2nd argument from the success typing arguments: ('fixed' | 'ufixed','x',char(),1..255)
src/ethereum_abi_parser.yrl:65: The call ethereum_abi_parser:double_juxt_type('ufixed',"x",128,19) will never return since it differs in the 2nd argument from the success typing arguments: ('fixed' | 'ufixed','x',char(),1..255)
apps/ex_wire/lib/ex_wire/config.ex:65: Invalid type specification for function 'Elixir.ExWire.Config':sync/0. The success typing is () -> 'nil'