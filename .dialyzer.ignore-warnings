:0: Unknown function 'Elixir.Poison':'decode!'/1
:0: Unknown function 'Elixir.Poison':'encode!'/1

# protocol warnings

:0: Unknown function 'Elixir.EVM.Interface.AccountInterface.Atom':'__impl__'/1
:0: Unknown function 'Elixir.EVM.Interface.AccountInterface.BitString':'__impl__'/1
:0: Unknown function 'Elixir.EVM.Interface.AccountInterface.Float':'__impl__'/1
:0: Unknown function 'Elixir.EVM.Interface.AccountInterface.Function':'__impl__'/1
:0: Unknown function 'Elixir.EVM.Interface.AccountInterface.Integer':'__impl__'/1
:0: Unknown function 'Elixir.EVM.Interface.AccountInterface.List':'__impl__'/1
:0: Unknown function 'Elixir.EVM.Interface.AccountInterface.Map':'__impl__'/1
:0: Unknown function 'Elixir.EVM.Interface.AccountInterface.PID':'__impl__'/1
:0: Unknown function 'Elixir.EVM.Interface.AccountInterface.Port':'__impl__'/1
:0: Unknown function 'Elixir.EVM.Interface.AccountInterface.Reference':'__impl__'/1
:0: Unknown function 'Elixir.EVM.Interface.AccountInterface.Tuple':'__impl__'/1
:0: Unknown function 'Elixir.EVM.Interface.BlockInterface.Atom':'__impl__'/1
:0: Unknown function 'Elixir.EVM.Interface.BlockInterface.BitString':'__impl__'/1
:0: Unknown function 'Elixir.EVM.Interface.BlockInterface.Float':'__impl__'/1
:0: Unknown function 'Elixir.EVM.Interface.BlockInterface.Function':'__impl__'/1
:0: Unknown function 'Elixir.EVM.Interface.BlockInterface.Integer':'__impl__'/1
:0: Unknown function 'Elixir.EVM.Interface.BlockInterface.List':'__impl__'/1
:0: Unknown function 'Elixir.EVM.Interface.BlockInterface.Map':'__impl__'/1
:0: Unknown function 'Elixir.EVM.Interface.BlockInterface.PID':'__impl__'/1
:0: Unknown function 'Elixir.EVM.Interface.BlockInterface.Port':'__impl__'/1
:0: Unknown function 'Elixir.EVM.Interface.BlockInterface.Reference':'__impl__'/1
:0: Unknown function 'Elixir.EVM.Interface.BlockInterface.Tuple':'__impl__'/1
:0: Unknown function 'Elixir.EVM.Configuration.Atom':'__impl__'/1
:0: Unknown function 'Elixir.EVM.Configuration.BitString':'__impl__'/1
:0: Unknown function 'Elixir.EVM.Configuration.Float':'__impl__'/1
:0: Unknown function 'Elixir.EVM.Configuration.Function':'__impl__'/1
:0: Unknown function 'Elixir.EVM.Configuration.Integer':'__impl__'/1
:0: Unknown function 'Elixir.EVM.Configuration.List':'__impl__'/1
:0: Unknown function 'Elixir.EVM.Configuration.Map':'__impl__'/1
:0: Unknown function 'Elixir.EVM.Configuration.PID':'__impl__'/1
:0: Unknown function 'Elixir.EVM.Configuration.Port':'__impl__'/1
:0: Unknown function 'Elixir.EVM.Configuration.Reference':'__impl__'/1
:0: Unknown function 'Elixir.EVM.Configuration.Tuple':'__impl__'/1

# evm warnings

apps/evm/lib/evm/functions.ex:154: Function 'not_enough_gas?'/2 has no local return
apps/evm/lib/evm/functions.ex:166: Function 'is_invalid_jump_destination?'/3 will never be called
apps/evm/lib/evm/functions.ex:180: Function 'is_invalid_jump_destination?'/3 will never be called
apps/evm/lib/evm/gas.ex:133: Function cost/2 has no local return
apps/evm/lib/evm/gas.ex:133: Function cost/3 has no local return
apps/evm/lib/evm/gas.ex:138: The call 'Elixir.EVM.Gas':operation_cost(atom(),_inputs@1::[integer()],_machine_state@1::#{'__struct__':='Elixir.EVM.MachineState', 'active_words':=integer(), 'gas':=integer(), 'last_return_data':=[integer()], 'memory':=binary(), 'previously_active_words':=integer(), 'program_counter':=integer(), 'stack':=[integer()]},_exec_env@1::#{'__struct__':='Elixir.EVM.ExecEnv', 'account_interface':=atom(), 'address':=<<_:160>>, 'block_interface':=atom(), 'config':=atom(), 'created_accounts':=[<<_:160>>], 'data':=binary(), 'gas_price':=integer(), 'initial_account_interface':=_, 'machine_code':=binary(), 'originator':=<<_:160>>, 'sender':=<<_:160>>, 'stack_depth':=integer(), 'value_in_wei':=integer()}) breaks the contract (atom(),['Elixir.EVM':val()],['Elixir.EVM':val()],'Elixir.EVM.MachineState':t()) -> t() | 'nil'
apps/evm/lib/evm/gas.ex:297: Function operation_cost/0 has no local return
apps/evm/lib/evm/gas.ex:297: The call 'Elixir.EVM.Gas':operation_cost('nil','nil','nil','nil') breaks the contract (atom(),['Elixir.EVM':val()],['Elixir.EVM':val()],'Elixir.EVM.MachineState':t()) -> t() | 'nil'
apps/evm/lib/evm/gas.ex:297: Function operation_cost/1 has no local return
apps/evm/lib/evm/gas.ex:297: The call 'Elixir.EVM.Gas':operation_cost(__@1::any(),'nil','nil','nil') breaks the contract (atom(),['Elixir.EVM':val()],['Elixir.EVM':val()],'Elixir.EVM.MachineState':t()) -> t() | 'nil'
apps/evm/lib/evm/gas.ex:297: Function operation_cost/2 has no local return
apps/evm/lib/evm/gas.ex:297: The call 'Elixir.EVM.Gas':operation_cost(__@1::any(),__@2::any(),'nil','nil') breaks the contract (atom(),['Elixir.EVM':val()],['Elixir.EVM':val()],'Elixir.EVM.MachineState':t()) -> t() | 'nil'
apps/evm/lib/evm/gas.ex:297: Function operation_cost/3 has no local return
apps/evm/lib/evm/gas.ex:297: The call 'Elixir.EVM.Gas':operation_cost(__@1::any(),__@2::any(),__@3::any(),'nil') breaks the contract (atom(),['Elixir.EVM':val()],['Elixir.EVM':val()],'Elixir.EVM.MachineState':t()) -> t() | 'nil'
apps/evm/lib/evm/gas.ex:526: Function gas_cost_for_nested_operation/2 will never be called
apps/evm/lib/evm/machine_state.ex:53: Function subtract_gas/2 has no local return
apps/evm/lib/evm/operation/environmental_information.ex:114: Function calldataload/2 has no local return
apps/evm/lib/evm/operation/environmental_information.ex:117: The call 'Elixir.EVM.Helpers':decode_signed(binary()) breaks the contract (integer() | 'nil') -> 'Elixir.EVM':val() | 'nil'
apps/evm/lib/evm/vm.ex:98: The pattern 'continue' can never match the type {'halt','invalid_instruction' | 'stack_underflow' | 'undefined_instruction'}
apps/evm/lib/evm/vm.ex:133: Function cycle/3 has no local return

-------------------------------
# TODO: rewrite mocked protocol typespecs
-------------------------------
lib/evm/interface/mock/mock_account_interface
lib/evm/interface/mock/mock_block_interface
lib/evm/machine_code

-------------------------------
# apps/evm/lib/evm/builtin.ex warnings
-------------------------------
apps/evm/lib/evm/builtin.ex:60: Call to missing or unexported function 'Elixir.ExthCrypto.Signature':version/0

-------------------------------
# Introduced by Elixir 1.6.4 https://github.com/elixir-lang/elixir/issues/7508
-------------------------------
lib/trie/helper.ex:41: Guard test is_binary(_@1::<<_:4>>) can never succeed
lib/trie/helper.ex:41: The variable _@1 can never match since previous clauses completely covered the type <<_:4>>

-------------------------------
# blockchain/block.ex warnings
-------------------------------
apps/blockchain/lib/blockchain/block.ex:438: Function gen_child_block/2 has no local return
apps/blockchain/lib/blockchain/block.ex:438: Function gen_child_block/3 has no local return
apps/blockchain/lib/blockchain/block.ex:443: The call 'Elixir.Blockchain.Block':set_block_number(#{'__s
truct__':='Elixir.Blockchain.Block', 'block_hash':='nil', 'header':=#{'__struct__':='Elixir.Block.Heade
r', 'beneficiary':=_, 'difficulty':='nil', 'extra_data':=_, 'gas_limit':=0, 'gas_used':=0, 'logs_bloom'
:=<<_:2048>>, 'mix_hash':=_, 'nonce':=<<_:64>>, 'number':='nil', 'ommers_hash':=<<_:256>>, 'parent_hash
':='nil', 'receipts_root':=<<_:256>>, 'state_root':=_, 'timestamp':=_, 'transactions_root':=<<_:256>>},
 'ommers':=[], 'transactions':=[]},_parent_block@1::any()) breaks the contract (t(),t()) -> t()
apps/merkle_patricia_tree/lib/merkle_patricia_tree/trie/helper.ex:41: Guard test is_binary(__@1::<<_:4>
>) can never succeed

apps/blockchain/lib/blockchain/block.ex:675: Function add_transactions/3 has no local return
apps/blockchain/lib/blockchain/block.ex:675: The call 'Elixir.Blockchain.Block':add_transactions(_@1
::any(),_@2::any(),_@3::any(),#{'__struct__':='Elixir.EVM.Configuration.Frontier', 'contract_creatio
n_cost':=21000, 'has_delegate_call':='false'}) will never return since the success typing is (#{'__s
truct__':='Elixir.Blockchain.Block', 'block_hash':='nil' | <<_:256>>, 'header':=#{'__struct__':='Eli
xir.Block.Header', 'beneficiary':='nil' | <<_:160>>, 'difficulty':='nil' | integer(), 'extra_data':=
binary(), 'gas_limit':=integer(), 'gas_used':=integer(), 'logs_bloom':=binary(), 'mix_hash':='nil' |
 <<_:256>>, 'nonce':='nil' | <<_:64>>, 'number':='nil' | integer(), 'ommers_hash':=binary(), 'parent
_hash':=<<_:256>>, 'receipts_root':=binary(), 'state_root':=binary(), 'timestamp':='nil' | integer()
, 'transactions_root':=binary()}, 'ommers':=[#{'__struct__':='Elixir.Block.Header', 'beneficiary':='
nil' | <<_:160>>, 'difficulty':='nil' | integer(), 'extra_data':=binary(), 'gas_limit':=integer(), '
gas_used':=integer(), 'logs_bloom':=binary(), 'mix_hash':='nil' | <<_:256>>, 'nonce':='nil' | <<_:64
>>, 'number':='nil' | integer(), 'ommers_hash':=binary(), 'parent_hash':=<<_:256>>, 'receipts_root':
=binary(), 'state_root':=binary(), 'timestamp':='nil' | integer(), 'transactions_root':=binary()}],
'transactions':=[#{'__struct__':='Elixir.Blockchain.Transaction', 'data':=binary(), 'gas_limit':=int
eger(), 'gas_price':=integer(), 'init':=binary(), 'nonce':=integer(), 'r':=integer(), 's':=integer()
, 'to':=<<_:_*160>>, 'v':=integer(), 'value':=integer()}]},[],{atom(),_},atom()) -> #{'__struct__':=
'Elixir.Blockchain.Block', 'block_hash':='nil' | <<_:256>>, 'header':=#{'__struct__':='Elixir.Block.
Header', 'beneficiary':='nil' | <<_:160>>, 'difficulty':='nil' | integer(), 'extra_data':=binary(),
'gas_limit':=integer(), 'gas_used':=integer(), 'logs_bloom':=binary(), 'mix_hash':='nil' | <<_:256>>
, 'nonce':='nil' | <<_:64>>, 'number':='nil' | integer(), 'ommers_hash':=binary(), 'parent_hash':=<<
_:256>>, 'receipts_root':=binary(), 'state_root':=binary(), 'timestamp':='nil' | integer(), 'transac
tions_root':=binary()}, 'ommers':=[#{'__struct__':='Elixir.Block.Header', 'beneficiary':='nil' | <<_
:160>>, 'difficulty':='nil' | integer(), 'extra_data':=binary(), 'gas_limit':=integer(), 'gas_used':
=integer(), 'logs_bloom':=binary(), 'mix_hash':='nil' | <<_:256>>, 'nonce':='nil' | <<_:64>>, 'numbe
r':='nil' | integer(), 'ommers_hash':=binary(), 'parent_hash':=<<_:256>>, 'receipts_root':=binary(),
 'state_root':=binary(), 'timestamp':='nil' | integer(), 'transactions_root':=binary()}], 'transacti
ons':=[#{'__struct__':='Elixir.Blockchain.Transaction', 'data':=binary(), 'gas_limit':=integer(), 'g
as_price':=integer(), 'init':=binary(), 'nonce':=integer(), 'r':=integer(), 's':=integer(), 'to':=<<
_:_*160>>, 'v':=integer(), 'value':=integer()}]} and the contract is (t(),['Elixir.Blockchain.Transa
ction':t()],'Elixir.MerklePatriciaTree.DB':db(),'Elixir.EVM.Configuration':t()) -> t()
apps/blockchain/lib/blockchain/block.ex:715: Invalid type specification for function 'Elixir.Blockch
ain.Block':put_state/2. The success typing is (#{'__struct__':='Elixir.Blockchain.Block', 'header':=
#{'__struct__':='Elixir.Block.Header', 'state_root':=_, _=>_}, _=>_},atom() | #{'root_hash':=_, _=>_
}) -> #{'__struct__':='Elixir.Blockchain.Block', 'header':=#{'__struct__':='Elixir.Block.Header', 's
tate_root':=_, _=>_}, _=>_}

-------------------------------
# blockchain/chain.ex
-------------------------------
apps/blockchain/lib/blockchain/chain.ex:94: Invalid type specification for function 'Elixir.Blockchain.Chain':load_chain/1. The success typing is (atom()) -> #{'__struct__':='Elixir.Blockchain.Chain', 'accounts':=map(), 'engine':=map(), 'genesis':=#{'author':=binary(), 'difficulty':=non_neg_integer(), 'extra_data':=binary(), 'gas_limit':=non_neg_integer(), 'parent_hash':=binary(), 'timestamp':=non_neg_integer()}, 'name':=_, 'nodes':=_, 'params':=#{'account_start_nonce':=non_neg_integer(), 'block_reward':=non_neg_integer(), 'eip155_transition':=_, 'eip86_transition':=non_neg_integer(), 'eip98_transition':=non_neg_integer(), 'gas_limit_bound_divisor':=non_neg_integer(), 'maximum_extra_data_size':=non_neg_integer(), 'min_gas_limit':=non_neg_integer()}}

-------------------------------
# blockchain/genesis.ex
-------------------------------
apps/blockchain/lib/blockchain/genesis.ex

-------------------------------
# blockchain/account.ex
-------------------------------
apps/blockchain/lib/blockchain/account.ex

-------------------------------
# blockchain/transaction.ex
-------------------------------
apps/blockchain/lib/blockchain/transaction.ex

-------------------------------
# blockchain/application.ex
-------------------------------
apps/blockchain/lib/blockchain/application.ex:16: The call 'Elixir.EVM.Debugger':break_on([{'address',binary()},...]) will never return since the success typing is (['address']) -> integer() and the contract is (elixir:keyword('Elixir.EVM.Debugger.Breakpoint':conditions())) -> 'Elixir.EVM.Debugger.Breakpoint':id()

-------------------------------
# Ignores the whole contract and account_interface file
-------------------------------
apps/blockchain/lib/blockchain/contract.ex
apps/blockchain/lib/blockchain/contract/create_contract.ex
apps/blockchain/lib/blockchain/contract/message_call.ex
apps/blockchain/lib/blockchain/interface/account_interface.ex

-------------------------------
# Ignores state test generation script
-------------------------------
apps/blockchain/scripts/generate_state_tests.ex
